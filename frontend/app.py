"""
MemoryMap - Interaktivn√≠ Mapa Vzpom√≠nek

Streamlit aplikace pro vizualizaci a spr√°vu geograficky um√≠stƒõn√Ωch vzpom√≠nek.
Souƒç√°st projektu vytvo≈ôen√©ho pro demonstraci technick√Ωch dovednost√≠ p≈ôi p≈ô√≠pravƒõ
na pohovor.

Funkce:
- Interaktivn√≠ mapa pro zobrazen√≠ vzpom√≠nek
- Nahr√°v√°n√≠ hlasov√Ωch z√°znam≈Ø
- Vyhled√°v√°n√≠ ve vzpom√≠nk√°ch
- Vizualizace okoln√≠ch m√≠st

Autor: Vytvo≈ôeno jako uk√°zka dovednost√≠ pro pohovor.
"""
# Update: Vylep≈°en√≠ podpory interaktivn√≠ch pin≈Ø a popup oken - 2023

import streamlit as st  # Knihovna pro tvorbu webov√Ωch aplikac√≠
import folium  # Knihovna pro pr√°ci s mapami
import requests  # Knihovna pro HTTP po≈æadavky
from streamlit_folium import folium_static, st_folium  # Pro zobrazen√≠ folium map ve Streamlitu
from datetime import datetime  # Pro pr√°ci s datem a ƒçasem
import time  # Pro pr√°ci s ƒçasem
import json  # Pro pr√°ci s JSON daty
import os  # Pro pr√°ci s promƒõnn√Ωmi prost≈ôed√≠

# Konfigurace backendu
BACKEND_URL = os.getenv('BACKEND_URL', 'https://memory-map.onrender.com')

# Nastaven√≠ str√°nky - z√°kladn√≠ konfigurace Streamlit aplikace
st.set_page_config(
    page_title="MemoryMap - Interaktivn√≠ Mapa Vzpom√≠nek",  # Titulek str√°nky v prohl√≠≈æeƒçi
    page_icon="üó∫Ô∏è",  # Ikona str√°nky v prohl√≠≈æeƒçi
    layout="wide",  # ≈†irok√© rozlo≈æen√≠ str√°nky
    initial_sidebar_state="expanded"  # Postrann√≠ panel bude na zaƒç√°tku rozbalen√Ω
)

# Konstanty aplikace
DEFAULT_LAT = 49.8  # V√Ωchoz√≠ zemƒõpisn√° ≈°√≠≈ôka (zhruba st≈ôed ƒåR)
DEFAULT_LON = 15.5  # V√Ωchoz√≠ zemƒõpisn√° d√©lka (zhruba st≈ôed ƒåR)

# Nastaven√≠ CSS styl≈Ø pro lep≈°√≠ vzhled aplikace
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #1E88E5;
        font-size: 3rem;
        margin-bottom: 1rem;
    }
    .subheader {
        font-size: 1.5rem;
        color: #0D47A1;
        margin-bottom: 1.5rem;
    }
    .success-msg {
        background-color: #DCEDC8;
        padding: 1rem;
        border-radius: 5px;
        border-left: 5px solid #8BC34A;
    }
    .error-msg {
        background-color: #FFCCBC;
        padding: 1rem;
        border-radius: 5px;
        border-left: 5px solid #FF5722;
    }
    .tooltip {
        position: relative;
        display: inline-block;
    }
    .tooltip .tooltiptext {
        visibility: hidden;
        width: 200px;
        background-color: #555;
        color: #fff;
        text-align: center;
        border-radius: 6px;
        padding: 5px;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        margin-left: -100px;
        opacity: 0;
        transition: opacity 0.3s;
    }
    .tooltip:hover .tooltiptext {
        visibility: visible;
        opacity: 1;
    }
</style>
""", unsafe_allow_html=True)

# Funkce pro komunikaci s backendem
def api_request(endpoint, method='GET', data=None):
    url = f"{BACKEND_URL}{endpoint}"
    try:
        if method == 'GET':
            response = requests.get(url)
        elif method == 'POST':
            response = requests.post(url, json=data)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"Chyba p≈ôi komunikaci s API: {str(e)}")
        return None

# Helper funkce pro vytvo≈ôen√≠ mapy se vzpom√≠nkami
def create_map(memories, center_lat=DEFAULT_LAT, center_lon=DEFAULT_LON):
    """Vytvo≈ôen√≠ mapy s interaktivn√≠mi piny vzpom√≠nek"""
    m = folium.Map(location=[center_lat, center_lon], zoom_start=7)
    
    # P≈ôid√°n√≠ z√°kladn√≠ mapov√© vrstvy Mapy.cz
    folium.TileLayer(
        tiles='https://mapserver.mapy.cz/base-m/{z}-{x}-{y}',
        attr='Mapy.cz',
        name='Z√°kladn√≠ mapa',
        overlay=False
    ).add_to(m)
    
    # P≈ôid√°n√≠ historick√© mapov√© vrstvy
    folium.TileLayer(
        tiles='https://mapserver.mapy.cz/19century-m/{z}-{x}-{y}',
        attr='Mapy.cz - 19. stolet√≠',
        name='Historick√° mapa',
        overlay=True
    ).add_to(m)
    
    # P≈ôid√°n√≠ ovladaƒçe vrstev
    folium.LayerControl().add_to(m)
    
    if not memories:
        return m
    
    # Logujeme poƒçet vzpom√≠nek pro diagnostiku v konzoli (ne na UI)
    print(f"Funkce create_map: Zpracov√°v√°m {len(memories)} vzpom√≠nek")
    
    # Zkus√≠me vypsat p≈ôehled kl√≠ƒç≈Ø prvn√≠ vzpom√≠nky do konzole, ne na UI
    if len(memories) > 0:
        print(f"Kl√≠ƒçe v prvn√≠ vzpom√≠nce: {list(memories[0].keys())}")
    
    for i, memory in enumerate(memories):
        try:
            # Kontrola kl√≠ƒçov√Ωch atribut≈Ø
            if not all(key in memory for key in ["latitude", "longitude", "location"]):
                # Pokud chyb√≠ kl√≠ƒçov√© atributy, zkus√≠me alternativn√≠ form√°t
                if "coordinates" in memory:
                    # Pokud m√°me sou≈ôadnice ve form√°tu "coordinates", zkus√≠me je rozdƒõlit
                    coords_str = memory.get("coordinates", "")
                    # Typick√© form√°ty: POINT(15.123 49.456) nebo geografick√Ω objekt
                    if isinstance(coords_str, str) and "POINT" in coords_str:
                        # Extrahujeme sou≈ôadnice z POINT(lon lat)
                        coords = coords_str.replace("POINT(", "").replace(")", "").split()
                        if len(coords) >= 2:
                            memory["longitude"] = float(coords[0])
                            memory["latitude"] = float(coords[1])
                    elif isinstance(coords_str, dict) and "coordinates" in coords_str:
                        # GeoJSON form√°t
                        memory["longitude"] = coords_str["coordinates"][0]
                        memory["latitude"] = coords_str["coordinates"][1]
                else:
                    print(f"Vzpom√≠nka {i+1} nem√° pot≈ôebn√© sou≈ôadnice: {memory}")
                    continue
            
            # Z√≠sk√°me sou≈ôadnice - upravujeme pro flexibilnƒõj≈°√≠ zpracov√°n√≠
            lat = float(memory.get("latitude", 0))
            lon = float(memory.get("longitude", 0))
            
            # Kontrola, ≈æe sou≈ôadnice jsou v rozumn√©m rozsahu
            if not (-90 <= lat <= 90) or not (-180 <= lon <= 180):
                print(f"Vzpom√≠nka {i+1} m√° neplatn√© sou≈ôadnice: lat={lat}, lon={lon}")
                continue
            
            # Bezpeƒçn√© z√≠sk√°n√≠ dat s fallbacky pro chybƒõj√≠c√≠
            location = memory.get("location", "Nezn√°m√© m√≠sto")
            text = memory.get("text", "Bez textu")
            keywords = memory.get("keywords", [])
            if not isinstance(keywords, list):
                keywords = []
            
            # Vylep≈°en√© pop-up okno s lep≈°√≠m form√°tov√°n√≠m a o≈°et≈ôen√≠m chybƒõj√≠c√≠ch hodnot
            popup_content = f"""
            <div style='width: 300px; padding: 10px; font-family: Arial, sans-serif;'>
                <h3 style='color: #1E88E5; margin-top: 0;'>{location}</h3>
                <div style='background-color: #f5f5f5; padding: 10px; border-radius: 5px; margin-bottom: 10px;'>
                    {text}
                </div>
                <div style='margin-top: 10px;'>
                    <p style='margin: 5px 0;'><strong style='color: #0D47A1;'>Kl√≠ƒçov√° slova:</strong> 
                       <span style='background-color: #E3F2FD; padding: 2px 5px; border-radius: 3px;'>{', '.join(keywords)}</span>
                    </p>
                    <p style='margin: 5px 0;'><strong style='color: #0D47A1;'>Datum:</strong> {memory.get('date', 'Neuvedeno')}</p>
                    <p style='margin: 5px 0;'><strong style='color: #0D47A1;'>Vytvo≈ôeno:</strong> {memory.get('created_at', 'Nezn√°m√© datum')}</p>
                </div>
            </div>
            """
            
            # Pou≈æit√≠ v√Ωraznƒõj≈°√≠ho pinu (FontAwesome ikona map-pin m√≠sto bookmark)
            folium.Marker(
                [lat, lon],
                popup=folium.Popup(popup_content, max_width=300),
                tooltip=location,
                icon=folium.Icon(icon="map-pin", prefix="fa", color="blue")
            ).add_to(m)
            
        except Exception as e:
            print(f"Chyba p≈ôi zpracov√°n√≠ vzpom√≠nky {i+1}: {str(e)}")
    
    # P≈ôid√°n√≠ click handleru pro p≈ôid√°n√≠ nov√© vzpom√≠nky s jasnƒõj≈°√≠m popisem
    m.add_child(folium.ClickForMarker(popup="Kliknƒõte zde pro p≈ôid√°n√≠ nov√© vzpom√≠nky"))
    
    return m

# Funkce pro georeferencov√°n√≠ n√°zvu m√≠sta
def georeference_placename(place_name, historical_period="1950"):
    """Georeferencov√°n√≠ historick√©ho n√°zvu m√≠sta pomoc√≠ API"""
    try:
        response = requests.post(
            f"{BACKEND_URL}/georef", 
            json={"place_name": place_name, "historical_period": historical_period},
            timeout=10
        )
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Chyba p≈ôi georeferencov√°n√≠: {response.text}")
            return None
    except Exception as e:
        st.error(f"Chyba p≈ôi komunikaci s API: {str(e)}")
        return None

# Funkce pro z√≠sk√°n√≠ v≈°ech vzpom√≠nek z API
def get_memories():
    """Z√≠sk√°n√≠ v≈°ech vzpom√≠nek z API"""
    try:
        # Odesl√°n√≠ GET po≈æadavku na backend API
        print(f"Pokou≈°√≠m se o p≈ôipojen√≠ k: {BACKEND_URL}/api/memories")
        response = requests.get(f"{BACKEND_URL}/api/memories", timeout=10)
        print(f"Status odpovƒõdi: {response.status_code}")
        
        if response.status_code == 200:
            # Pokud byl po≈æadavek √∫spƒõ≈°n√Ω, vr√°t√≠me data
            data = response.json()
            print(f"Z√≠sk√°no {len(data)} z√°znam≈Ø")
            if len(data) > 0:
                print(f"Prvn√≠ z√°znam obsahuje kl√≠ƒçe: {list(data[0].keys())}")
            return data
        else:
            # Pokud nastal probl√©m, zobraz√≠me chybovou zpr√°vu
            st.error(f"Chyba p≈ôi naƒç√≠t√°n√≠ vzpom√≠nek (Status: {response.status_code})")
            try:
                st.error(f"Detaily chyby: {response.text}")
            except:
                pass
            return []
    except requests.exceptions.ConnectionError:
        # Pokud se nelze p≈ôipojit k API
        st.error(f"Nepoda≈ôilo se p≈ôipojit k API na adrese {BACKEND_URL}. Zkontrolujte, zda backend bƒõ≈æ√≠.")
        return []
    except Exception as e:
        # Zachycen√≠ v≈°ech ostatn√≠ch chyb
        st.error(f"Chyba p≈ôi komunikaci s API: {str(e)}")
        return []

# Funkce pro p≈ôid√°n√≠ nov√© vzpom√≠nky p≈ôes API
def add_memory(text, location, lat, lon, source=None, date=None):
    """P≈ôid√°n√≠ nov√© vzpom√≠nky p≈ôes API"""
    try:
        # P≈ô√≠prava dat pro odesl√°n√≠
        data = {
            "text": text,
            "location": location,
            "latitude": lat,
            "longitude": lon
        }
        
        # P≈ôid√°n√≠ voliteln√Ωch pol√≠, pokud jsou vyplnƒõna
        if source:
            data["source"] = source
        if date:
            data["date"] = date
        
        # Odesl√°n√≠ POST po≈æadavku na backend API
        response = requests.post(
            f"{BACKEND_URL}/api/analyze",
            json=data,
            timeout=10
        )
        
        # Kontrola odpovƒõdi
        if response.status_code == 200:
            return True, "‚úÖ Vzpom√≠nka byla √∫spƒõ≈°nƒõ p≈ôid√°na! Nov√Ω pin byl p≈ôid√°n na mapu."
        else:
            return False, f"‚ùå Chyba p≈ôi p≈ôid√°v√°n√≠ vzpom√≠nky: {response.text}"
    except requests.exceptions.ConnectionError:
        # Pokud se nelze p≈ôipojit k API
        return False, f"‚ùå Nepoda≈ôilo se p≈ôipojit k API na adrese {BACKEND_URL}. Zkontrolujte, zda backend bƒõ≈æ√≠."
    except Exception as e:
        # Zachycen√≠ v≈°ech ostatn√≠ch chyb
        return False, f"‚ùå Chyba p≈ôi komunikaci s API: {str(e)}"

# Sidebar - informace o aplikaci v postrann√≠m panelu
with st.sidebar:
    # Stylizovan√© logo pomoc√≠ emoji a textu - nahrazujeme extern√≠ obr√°zek
    st.markdown("""
    <div style='text-align: center; margin-bottom: 20px;'>
        <div style='font-size: 50px;'>üó∫Ô∏è üìç üìù</div>
        <div style='background: linear-gradient(90deg, #3498db, #2c3e50); 
                   -webkit-background-clip: text; 
                   -webkit-text-fill-color: transparent; 
                   font-size: 28px; 
                   font-weight: bold;
                   margin-top: 10px;'>
            MemoryMap
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    st.info(
        "Aplikace pro ukl√°d√°n√≠ a vizualizaci vzpom√≠nek a historick√Ωch √∫daj≈Ø na interaktivn√≠ mapƒõ. "
        "Uk√°zka technick√Ωch dovednost√≠ v oblasti v√Ωvoje geografick√Ωch aplikac√≠."
    )
    
    # Aktualizace sekce o pou≈æit√≠ aplikace
    st.subheader("üìã N√°vod k pou≈æit√≠")
    st.markdown("""
    **P≈ôid√°n√≠ nov√© vzpom√≠nky:**
    1. Kliknƒõte na libovoln√© m√≠sto na mapƒõ
    2. Vypl≈àte text vzpom√≠nky a dopl≈àuj√≠c√≠ √∫daje
    3. Kliknƒõte na tlaƒç√≠tko "Ulo≈æit vzpom√≠nku"

    **Zobrazen√≠ existuj√≠c√≠ vzpom√≠nky:**
    - Kliknƒõte na modr√Ω pin na mapƒõ
    - Detaily se zobraz√≠ v pop-up oknƒõ
    """)
    
    # Kontrola p≈ôipojen√≠ k API - vylep≈°en√≠ zobrazen√≠
    st.subheader("üîå Stav p≈ôipojen√≠")
    try:
        response = requests.get(f"{BACKEND_URL}", timeout=2)
        if response.status_code == 200:
            st.success("‚úÖ Backend API je dostupn√©")
        else:
            st.warning(f"‚ö†Ô∏è Backend API odpov√≠d√° s k√≥dem: {response.status_code}")
    except:
        st.error("‚ùå Backend API nen√≠ dostupn√©")
    
    # P≈ôid√°m odkaz na dokumentaci
    st.subheader("üìö Dokumentace")
    st.markdown("[GitHub repozit√°≈ô](https://github.com/moziyuri/memory_map)")
    st.markdown("[Architektura syst√©mu](https://github.com/moziyuri/memory_map/blob/master/ARCHITECTURE.md)")

# Hlavn√≠ obsah aplikace - aktualizuji nadpisy a titulky
st.markdown("<h1 class='main-header'>üó∫Ô∏è MemoryMap</h1>", unsafe_allow_html=True)
st.markdown("<p class='subheader'>Interaktivn√≠ mapa pro ukl√°d√°n√≠ a sd√≠len√≠ vzpom√≠nek</p>", unsafe_allow_html=True)

# Z√°lo≈æky pro r≈Øzn√© ƒç√°sti aplikace - zmƒõn√≠m zobrazen√≠ na v√Ωraznƒõj≈°√≠
tab1, tab2 = st.tabs(["üìç Mapa vzpom√≠nek", "‚ÑπÔ∏è O aplikaci"])

with tab1:
    # Mapa
    st.markdown('<div class="tooltip">üìç Mapa vzpom√≠nek<span class="tooltiptext">Kliknƒõte na mapu pro p≈ôid√°n√≠ nov√© vzpom√≠nky nebo na pin pro zobrazen√≠ detailu</span></div>', unsafe_allow_html=True)
    
    # Pozn√°mka o AI-generovan√Ωch vzpom√≠nk√°ch
    st.caption("üí° Pozn√°mka: Vzpom√≠nky zobrazen√© na mapƒõ byly vygenerov√°ny pomoc√≠ umƒõl√© inteligence pro demonstraƒçn√≠ √∫ƒçely.")
    
    # Z√≠sk√°n√≠ vzpom√≠nek
    memories = get_memories()
    
    # Kompaktnƒõj≈°√≠ diagnostick√° sekce
    with st.expander("üìä Diagnostika API", expanded=False):
        st.subheader("Stav naƒç√≠t√°n√≠ dat")
        
        # Kontrolujeme, zda m√°me nƒõjak√© vzpom√≠nky
        if memories:
            st.success(f"‚úÖ Naƒçteno {len(memories)} vzpom√≠nek z datab√°ze")
            # Detaily prvn√≠ vzpom√≠nky zobraz√≠me pouze pokud existuj√≠ vzpom√≠nky
            if len(memories) > 0:
                st.write("Detaily prvn√≠ vzpom√≠nky:")
                st.json(memories[0])
        else:
            st.error("‚ùå Datab√°ze neobsahuje ≈æ√°dn√© vzpom√≠nky nebo se nepoda≈ôilo p≈ôipojit k API")
            
            # Pouze pokud nejsou naƒçteny vzpom√≠nky, pokus√≠me se o p≈ô√≠m√Ω p≈ô√≠stup k API
            st.subheader("P≈ô√≠m√Ω test API p≈ô√≠stupu")
            try:
                direct_url = f"{BACKEND_URL}/api/memories"
                st.write(f"Odes√≠l√°m po≈æadavek na: {direct_url}")
                
                direct_response = requests.get(direct_url, timeout=10)
                st.write(f"Status k√≥d: {direct_response.status_code}")
                
                if direct_response.status_code == 200:
                    data = direct_response.json()
                    st.write(f"Odpovƒõƒè API obsahuje {len(data)} z√°znam≈Ø")
                    st.json(data[:3] if len(data) > 3 else data)  # Zobraz√≠me nejv√Ω≈°e 3 z√°znamy
                else:
                    st.error(f"Chyba p≈ôi p≈ô√≠m√©m p≈ô√≠stupu k API: {direct_response.text}")
            except Exception as e:
                st.error(f"Chyba p≈ôi p≈ô√≠m√©m p≈ô√≠stupu k API: {str(e)}")
    
    # Informaƒçn√≠ zpr√°va pro u≈æivatele
    st.info("üëâ Pro p≈ôid√°n√≠ nov√© vzpom√≠nky kliknƒõte na po≈æadovan√© m√≠sto na mapƒõ. Pro zobrazen√≠ existuj√≠c√≠ vzpom√≠nky kliknƒõte na modr√Ω pin.")
    
    # Vytvo≈ôen√≠ a zobrazen√≠ mapy - p≈ôesouv√°me mimo diagnostickou sekci a zjednodu≈°ujeme
    try:
        # Vytvo≈ôen√≠ mapy
        m = create_map(memories)
        
        # Zobrazen√≠ mapy v aplikaci
        map_data = st_folium(m, width=1200, height=600)
        
        # Zpracov√°n√≠ kliknut√≠ na mapu
        if map_data and map_data.get("last_clicked"):
            lat, lon = map_data["last_clicked"]["lat"], map_data["last_clicked"]["lng"]
            
            # Z√≠sk√°n√≠ p≈ôibli≈æn√©ho n√°zvu m√≠sta pomoc√≠ reverzn√≠ho geok√≥dov√°n√≠
            try:
                import reverse_geocoder as rg
                location_info = rg.search((lat, lon))
                if location_info and len(location_info) > 0:
                    suggested_location = f"{location_info[0]['name']}, {location_info[0]['admin1']}"
                else:
                    suggested_location = f"M√≠sto na sou≈ôadnic√≠ch [{lat:.5f}, {lon:.5f}]"
            except Exception as e:
                # Pokud sel≈æe reverzn√≠ geok√≥dov√°n√≠, pou≈æijeme jen sou≈ôadnice
                suggested_location = f"M√≠sto na sou≈ôadnic√≠ch [{lat:.5f}, {lon:.5f}]"
            
            # Formul√°≈ô pro p≈ôid√°n√≠ nov√© vzpom√≠nky
            st.subheader("üìù P≈ôidat novou vzpom√≠nku")
            
            # Vytvo≈ôen√≠ jednoduch√©ho formul√°≈ôe
            with st.form("memory_form"):
                # Text vzpom√≠nky
                text = st.text_area("Text vzpom√≠nky*", height=150, 
                                   help="Popi≈°te va≈°i vzpom√≠nku nebo historickou ud√°lost")
                
                # N√°zev m√≠sta - p≈ôedvyplnƒõn√Ω z reverzn√≠ho geok√≥dov√°n√≠
                location = st.text_input("N√°zev m√≠sta*", 
                                       value=suggested_location,
                                       help="N√°zev m√≠sta, ke kter√©mu se vzpom√≠nka v√°≈æe")
                
                # Roz≈°√≠≈ôen√© informace - voliteln√©
                col1, col2 = st.columns(2)
                with col1:
                    source = st.text_input("Zdroj (voliteln√©)", 
                                          help="Odkud informace poch√°z√≠ (kniha, archiv, osobn√≠ zku≈°enost)")
                with col2:
                    date = st.text_input("Datum (voliteln√©)", 
                                        help="Datum vzpom√≠nky nebo ud√°losti (libovoln√Ω form√°t)")
                
                # Informace o sou≈ôadnic√≠ch - pouze pro informaci
                st.write(f"Sou≈ôadnice: {lat:.5f}, {lon:.5f}")
                
                # Tlaƒç√≠tko pro odesl√°n√≠
                submit = st.form_submit_button("Ulo≈æit vzpom√≠nku")
                
                # Zpracov√°n√≠ odesl√°n√≠ formul√°≈ôe
                if submit:
                    if text and location:
                        # Odesl√°n√≠ dat na backend
                        with st.spinner("Ukl√°d√°m vzpom√≠nku a analyzuji kl√≠ƒçov√° slova..."):
                            success, message = add_memory(text, location, lat, lon, source, date)
                            if success:
                                st.success(message)
                                st.balloons()  # P≈ôid√°me efekt balonk≈Ø pro oslavu √∫spƒõchu
                                time.sleep(1)  # Kr√°tk√° pauza, aby u≈æivatel vidƒõl √∫spƒõ≈°nou zpr√°vu
                                st.experimental_rerun()  # Obnov√≠me str√°nku pro zobrazen√≠ nov√©ho pinu
                            else:
                                st.error(message)
                    else:
                        st.warning("‚ö†Ô∏è Vypl≈àte pros√≠m text vzpom√≠nky a n√°zev m√≠sta")
    except Exception as e:
        st.error(f"Chyba p≈ôi vytv√°≈ôen√≠ nebo zobrazen√≠ mapy: {str(e)}")
        st.write("Detaily chyby:")
        st.exception(e)

with tab2:
    st.header("üß† O aplikaci MemoryMap")
    
    # Zv√Ωraznƒõn√° informace o √∫ƒçelu aplikace
    st.info("**MemoryMap** je interaktivn√≠ projekt pro ukl√°d√°n√≠ geograficky um√≠stƒõn√Ωch vzpom√≠nek a historick√Ωch fakt≈Ø. Byl vytvo≈ôen jako uk√°zka technick√Ωch dovednost√≠ pro √∫ƒçely pracovn√≠ho pohovoru, demonstruj√≠c√≠ praktick√© zku≈°enosti s v√Ωvojem full-stack aplikac√≠ a zpracov√°n√≠m geografick√Ωch dat.")
    
    # Aktualizovan√° struktura aplikace - v√≠ce detail≈Ø
    st.subheader("üîç Architektura projektu")
    st.markdown("""
    ```
    MemoryMap/
    ‚îú‚îÄ‚îÄ Frontend (Streamlit)
    ‚îÇ   ‚îî‚îÄ‚îÄ Interaktivn√≠ mapa s piny a formul√°≈ôem pro p≈ôid√°v√°n√≠ vzpom√≠nek
    ‚îú‚îÄ‚îÄ Backend (FastAPI)
    ‚îÇ   ‚îú‚îÄ‚îÄ REST API pro spr√°vu vzpom√≠nek
    ‚îÇ   ‚îú‚îÄ‚îÄ PostgreSQL + PostGIS datab√°ze
    ‚îÇ   ‚îî‚îÄ‚îÄ Anal√Ωza textu a extrakce kl√≠ƒçov√Ωch slov
    ‚îî‚îÄ‚îÄ Infrastruktura
        ‚îú‚îÄ‚îÄ Nasazen√≠ na Streamlit Cloud (frontend)
        ‚îî‚îÄ‚îÄ Nasazen√≠ na Render.com (backend)
    ```
    """)
    
    # Aktualizovan√© technologie
    st.subheader("‚öôÔ∏è Pou≈æit√© technologie")
    # Nejprve p≈ôid√°m informaci o hlavn√≠m programovac√≠m jazyce
    st.markdown("**Programovac√≠ jazyk:** Python 3.9+ (full-stack)")

    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**Frontend:**")
        st.markdown("- Streamlit")
        st.markdown("- Folium (interaktivn√≠ mapy)")
        st.markdown("- Reverse Geocoding")
    
    with col2:
        st.markdown("**Backend:**")
        st.markdown("- FastAPI")
        st.markdown("- Pydantic")
        st.markdown("- RESTful API")
    
    with col3:
        st.markdown("**Datab√°ze:**")
        st.markdown("- PostgreSQL")
        st.markdown("- PostGIS roz≈°√≠≈ôen√≠")
        st.markdown("- psycopg2")
    
    # Aktualizovan√° funkcionalita
    st.subheader("‚ú® Hlavn√≠ funkce")
    st.markdown("""
    - **Interaktivn√≠ mapa** s piny reprezentuj√≠c√≠mi ulo≈æen√© vzpom√≠nky
    - **Pop-up okna** s detaily vzpom√≠nek a kl√≠ƒçov√Ωmi slovy
    - **Intuitivn√≠ p≈ôid√°v√°n√≠ vzpom√≠nek** kliknut√≠m na mapƒõ
    - **Automatick√° geolokace** podle kliknut√≠ na mapƒõ
    - **Extrakce kl√≠ƒçov√Ωch slov** z textu vzpom√≠nek
    - **Multivrstv√° mapa** s modern√≠m i historick√Ωm zobrazen√≠m
    """)
    
    # Aktualizovan√Ω c√≠l projektu
    st.subheader("üéØ C√≠l projektu")
    st.markdown("""
    Tento projekt demonstruje komplexn√≠ full-stack aplikaci s d≈Ørazem na:
    1. **Modern√≠ architekturu** - oddƒõlen√≠ frontend a backend logiky
    2. **Geografick√© funkce** - pr√°ce s mapami a prostorov√Ωmi daty
    3. **RESTful API design** - ƒçist√° implementace API endpoint≈Ø
    4. **Cloud deployment** - nasazen√≠ v produkƒçn√≠m prost≈ôed√≠
    5. **U≈æivatelskou p≈ô√≠vƒõtivost** - intuitivn√≠ rozhran√≠ pro interakci s mapou
    """)
    
    # Aktualizovan√© kontaktn√≠ √∫daje
    st.subheader("üì¨ Kontakt")
    st.markdown("**Autor:** Stanislav Hor√°ƒçek")
    st.markdown("**GitHub:** [github.com/moziyuri/memory_map](https://github.com/moziyuri/memory_map)")
    st.markdown("**Platforma:** Demo aplikace pro technick√© pohovory")

# Aktualizuji patiƒçku aplikace s pevnƒõ nastaven√Ωm rokem 2025
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666; padding: 10px;'>
        <p>¬© 2025 MemoryMap | Interaktivn√≠ mapa vzpom√≠nek</p>
        <p style='font-size: 0.8em;'>
            <a href='https://github.com/moziyuri/memory_map' target='_blank'>GitHub</a> | 
            <a href='https://github.com/moziyuri/memory_map/blob/master/README.md' target='_blank'>README</a> | 
            <a href='https://github.com/moziyuri/memory_map/blob/master/USER_GUIDE.md' target='_blank'>U≈æivatelsk√° p≈ô√≠ruƒçka</a> | 
            <a href='https://github.com/moziyuri/memory_map/blob/master/ARCHITECTURE.md' target='_blank'>Architektura</a>
        </p>
    </div>
    """,
    unsafe_allow_html=True
) 