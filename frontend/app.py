import streamlit as st  # Knihovna pro tvorbu webov√Ωch aplikac√≠
import folium  # Knihovna pro pr√°ci s mapami
import requests  # Knihovna pro HTTP po≈æadavky
from streamlit_folium import folium_static  # Pro zobrazen√≠ folium map ve Streamlitu
from datetime import datetime  # Pro pr√°ci s datem a ƒçasem
import time  # Pro pr√°ci s ƒçasem
import json  # Pro pr√°ci s JSON daty

# Nastaven√≠ str√°nky - z√°kladn√≠ konfigurace Streamlit aplikace
st.set_page_config(
    page_title="MemoryMap AI",  # Titulek str√°nky v prohl√≠≈æeƒçi
    page_icon="üó∫Ô∏è",  # Ikona str√°nky v prohl√≠≈æeƒçi
    layout="wide",  # ≈†irok√© rozlo≈æen√≠ str√°nky
    initial_sidebar_state="expanded"  # Postrann√≠ panel bude na zaƒç√°tku rozbalen√Ω
)

# Konstanty aplikace
API_URL = "http://localhost:8000"  # Adresa backend API
DEFAULT_LAT = 49.8  # V√Ωchoz√≠ zemƒõpisn√° ≈°√≠≈ôka (zhruba st≈ôed ƒåR)
DEFAULT_LON = 15.5  # V√Ωchoz√≠ zemƒõpisn√° d√©lka (zhruba st≈ôed ƒåR)

# Nastaven√≠ CSS styl≈Ø pro lep≈°√≠ vzhled aplikace
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #1E88E5;
        font-size: 3rem;
        margin-bottom: 1rem;
    }
    .subheader {
        font-size: 1.5rem;
        color: #0D47A1;
        margin-bottom: 1.5rem;
    }
    .success-msg {
        background-color: #DCEDC8;
        padding: 1rem;
        border-radius: 5px;
        border-left: 5px solid #8BC34A;
    }
    .error-msg {
        background-color: #FFCCBC;
        padding: 1rem;
        border-radius: 5px;
        border-left: 5px solid #FF5722;
    }
</style>
""", unsafe_allow_html=True)

# Helper funkce pro vytvo≈ôen√≠ mapy se vzpom√≠nkami
def create_map(memories, center_lat=DEFAULT_LAT, center_lon=DEFAULT_LON):
    """Vytvo≈ôen√≠ mapy s markery vzpom√≠nek"""
    # Inicializace mapy se st≈ôedem a √∫rovn√≠ p≈ôibl√≠≈æen√≠
    m = folium.Map(location=[center_lat, center_lon], zoom_start=7)
    
    # P≈ôid√°n√≠ z√°kladn√≠ mapov√© vrstvy Mapy.cz
    folium.TileLayer(
        tiles='https://mapserver.mapy.cz/base-m/{z}-{x}-{y}',
        attr='Mapy.cz',
        name='Z√°kladn√≠ mapa',
        overlay=False
    ).add_to(m)
    
    # P≈ôid√°n√≠ historick√© mapov√© vrstvy z 19. stolet√≠
    folium.TileLayer(
        tiles='https://mapserver.mapy.cz/19century-m/{z}-{x}-{y}',
        attr='Mapy.cz - 19. stolet√≠',
        name='Historick√° mapa 19. stolet√≠',
        overlay=True
    ).add_to(m)
    
    # P≈ôid√°n√≠ vrstvy c√≠sa≈ôsk√Ωch otisk≈Ø
    folium.TileLayer(
        tiles='https://ags.cuzk.cz/archiv-wmts/tile/1.0.0/3857/{z}/{y}/{x}',
        attr='ƒå√öZK - Archivy',
        name='C√≠sa≈ôsk√© otisky',
        overlay=True
    ).add_to(m)
    
    # P≈ôid√°n√≠ dal≈°√≠ historick√© vrstvy ƒå√öZK
    folium.TileLayer(
        tiles='https://ags.cuzk.cz/archiv-wmts/tile/1.0.0/3857/{z}/{y}/{x}',
        attr='ƒå√öZK - Archivy',
        name='Historick√© mapy ƒå√öZK',
        overlay=True
    ).add_to(m)
    
    # P≈ôid√°n√≠ ovladaƒçe vrstev
    folium.LayerControl().add_to(m)
    
    # Kdy≈æ nejsou ≈æ√°dn√© vzpom√≠nky, vr√°t√≠me pr√°zdnou mapu
    if not memories:
        return m
    
    # P≈ôid√°me ka≈ædou vzpom√≠nku jako marker na mapƒõ
    for memory in memories:
        # Vytvo≈ôen√≠ HTML obsahu pro popup markeru
        popup_content = f"""
        <div style='width: 300px'>
            <h4>{memory['location']}</h4>
            <p>{memory['text']}</p>
            <p><small><b>Kl√≠ƒçov√° slova:</b> {', '.join(memory['keywords'])}</small></p>
            <p><small><b>Vytvo≈ôeno:</b> {memory.get('created_at', 'Nezn√°m√© datum')}</small></p>
        </div>
        """
        
        # P≈ôid√°n√≠ markeru na mapu
        folium.Marker(
            [memory["latitude"], memory["longitude"]],  # Pozice markeru
            popup=folium.Popup(popup_content, max_width=300),  # Obsah popup okna
            tooltip=memory["location"],  # Text, kter√Ω se zobraz√≠ p≈ôi najet√≠ my≈°√≠
            icon=folium.Icon(icon="bookmark", prefix="fa", color="blue")  # Ikona markeru
        ).add_to(m)
    
    return m

# Funkce pro georeferencov√°n√≠ n√°zvu m√≠sta
def georeference_placename(place_name, historical_period="1950"):
    """Georeferencov√°n√≠ historick√©ho n√°zvu m√≠sta pomoc√≠ API"""
    try:
        response = requests.post(
            f"{API_URL}/georef", 
            json={"place_name": place_name, "historical_period": historical_period},
            timeout=10
        )
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Chyba p≈ôi georeferencov√°n√≠: {response.text}")
            return None
    except Exception as e:
        st.error(f"Chyba p≈ôi komunikaci s API: {str(e)}")
        return None

# Funkce pro z√≠sk√°n√≠ v≈°ech vzpom√≠nek z API
def get_memories():
    """Z√≠sk√°n√≠ v≈°ech vzpom√≠nek z API"""
    try:
        # Odesl√°n√≠ GET po≈æadavku na backend API
        response = requests.get(f"{API_URL}/api/memories", timeout=5)
        if response.status_code == 200:
            # Pokud byl po≈æadavek √∫spƒõ≈°n√Ω, vr√°t√≠me data
            return response.json()
        else:
            # Pokud nastal probl√©m, zobraz√≠me chybovou zpr√°vu
            st.error(f"Chyba p≈ôi naƒç√≠t√°n√≠ vzpom√≠nek (Status: {response.status_code})")
            return []
    except requests.exceptions.ConnectionError:
        # Pokud se nelze p≈ôipojit k API
        st.error(f"Nepoda≈ôilo se p≈ôipojit k API na adrese {API_URL}. Zkontrolujte, zda backend bƒõ≈æ√≠.")
        return []
    except Exception as e:
        # Zachycen√≠ v≈°ech ostatn√≠ch chyb
        st.error(f"Chyba p≈ôi komunikaci s API: {str(e)}")
        return []

# Funkce pro p≈ôid√°n√≠ nov√© vzpom√≠nky p≈ôes API
def add_memory(text, location, lat, lon):
    """P≈ôid√°n√≠ nov√© vzpom√≠nky p≈ôes API"""
    try:
        # P≈ô√≠prava dat pro odesl√°n√≠
        data = {
            "text": text,
            "location": location,
            "latitude": lat,
            "longitude": lon
        }
        
        # Odesl√°n√≠ POST po≈æadavku na backend API
        response = requests.post(
            f"{API_URL}/api/analyze",
            json=data,
            timeout=10
        )
        
        # Kontrola odpovƒõdi
        if response.status_code == 200:
            return True, "Vzpom√≠nka byla √∫spƒõ≈°nƒõ p≈ôid√°na!"
        else:
            return False, f"Chyba p≈ôi p≈ôid√°v√°n√≠ vzpom√≠nky: {response.text}"
    except requests.exceptions.ConnectionError:
        # Pokud se nelze p≈ôipojit k API
        return False, f"Nepoda≈ôilo se p≈ôipojit k API na adrese {API_URL}. Zkontrolujte, zda backend bƒõ≈æ√≠."
    except Exception as e:
        # Zachycen√≠ v≈°ech ostatn√≠ch chyb
        return False, f"Chyba p≈ôi komunikaci s API: {str(e)}"

# Sidebar - informace o aplikaci v postrann√≠m panelu
with st.sidebar:
    # Logo aplikace
    st.image("https://via.placeholder.com/150x150.png?text=MemoryMap", width=150)
    st.title("O aplikaci")
    st.info(
        "MemoryMap je aplikace pro ukl√°d√°n√≠ a vizualizaci va≈°ich vzpom√≠nek "
        "na mapƒõ. P≈ôidejte vzpom√≠nku, vyberte um√≠stƒõn√≠ a nechte AI "
        "analyzovat kl√≠ƒçov√° slova."
    )
    
    # Georeferencov√°n√≠ historick√Ωch n√°zv≈Ø
    st.subheader("Georeferencov√°n√≠")
    with st.form("georef_form"):
        place_name = st.text_input("N√°zev historick√©ho m√≠sta")
        historical_period = st.selectbox(
            "Historick√© obdob√≠",
            options=["1850", "1900", "1950", "2000"],
            index=2
        )
        georef_submit = st.form_submit_button("Georeferencovat")
        
        if georef_submit and place_name:
            with st.spinner("Hled√°m historick√© m√≠sto..."):
                result = georeference_placename(place_name, historical_period)
                if result and "error" not in result:
                    st.success(f"Nalezeno m√≠sto: {result['name']}")
                    st.write(f"Geometrie: {result['geometry']}")
                elif result and "error" in result:
                    st.error(result["error"])
                else:
                    st.error("Nepoda≈ôilo se georeferencovat m√≠sto.")
    
    # Kontrola p≈ôipojen√≠ k API
    st.subheader("Status API")
    try:
        response = requests.get(f"{API_URL}", timeout=2)
        if response.status_code == 200:
            st.success("‚úÖ API je dostupn√©")
        else:
            st.warning(f"‚ö†Ô∏è API vrac√≠ status k√≥d: {response.status_code}")
    except:
        st.error("‚ùå API nen√≠ dostupn√©")

# Hlavn√≠ obsah aplikace
st.markdown("<h1 class='main-header'>MemoryMap AI</h1>", unsafe_allow_html=True)
st.markdown("<p class='subheader'>Vizualizujte sv√© vzpom√≠nky na mapƒõ</p>", unsafe_allow_html=True)

# Rozdƒõlen√≠ obrazovky na dva sloupce
col1, col2 = st.columns([1, 2])

# Lev√Ω sloupec - formul√°≈ô pro p≈ôid√°n√≠ vzpom√≠nky
with col1:
    st.markdown("### P≈ôidat novou vzpom√≠nku")
    
    # Vytvo≈ôen√≠ formul√°≈ôe
    with st.form("memory_form", clear_on_submit=True):
        # Pole pro text vzpom√≠nky
        text = st.text_area("Text vzpom√≠nky", placeholder="Popi≈°te svou vzpom√≠nku...", height=150)
        # Pole pro n√°zev m√≠sta
        location = st.text_input("N√°zev m√≠sta", placeholder="Nap≈ô. Praha, Brno, ...")
        
        # Pole pro sou≈ôadnice - rozdƒõleno do dvou sloupc≈Ø
        lat_col, lon_col = st.columns(2)
        with lat_col:
            lat = st.number_input("Zemƒõpisn√° ≈°√≠≈ôka", value=DEFAULT_LAT, format="%.6f")
        with lon_col:
            lon = st.number_input("Zemƒõpisn√° d√©lka", value=DEFAULT_LON, format="%.6f")
        
        # Tlaƒç√≠tko pro odesl√°n√≠ formul√°≈ôe
        submit_button = st.form_submit_button("P≈ôidat vzpom√≠nku", use_container_width=True)
        
        # Zpracov√°n√≠ formul√°≈ôe po odesl√°n√≠
        if submit_button:
            if not text or not location:
                # Kontrola, zda jsou vyplnƒõna povinn√° pole
                st.error("Vypl≈àte pros√≠m text vzpom√≠nky a n√°zev m√≠sta.")
            else:
                # Odesl√°n√≠ dat na backend
                with st.spinner("P≈ôid√°v√°m vzpom√≠nku a analyzuji kl√≠ƒçov√° slova..."):
                    success, message = add_memory(text, location, lat, lon)
                    if success:
                        # Zobrazen√≠ √∫spƒõ≈°n√© zpr√°vy
                        st.markdown(f"<div class='success-msg'>{message}</div>", unsafe_allow_html=True)
                        time.sleep(1)  # Kr√°tk√© zpo≈ædƒõn√≠ pro lep≈°√≠ UX
                        st.experimental_rerun()  # Znovu naƒçteme str√°nku pro aktualizaci dat
                    else:
                        # Zobrazen√≠ chybov√© zpr√°vy
                        st.markdown(f"<div class='error-msg'>{message}</div>", unsafe_allow_html=True)

# Prav√Ω sloupec - mapa a seznam vzpom√≠nek
with col2:
    st.markdown("### Mapa vzpom√≠nek")
    
    # Nastaven√≠ typu mapov√©ho podkladu
    map_type = st.radio(
        "Vyberte typ mapov√©ho podkladu:",
        ("Modern√≠", "Historick√Ω", "V≈°echny vrstvy"),
        horizontal=True
    )
    
    # Naƒçten√≠ vzpom√≠nek z API
    with st.spinner("Naƒç√≠t√°m vzpom√≠nky..."):
        memories = get_memories()
    
    # Vytvo≈ôen√≠ a zobrazen√≠ mapy
    if memories:
        # Pokud jsou nƒõjak√© vzpom√≠nky, vytvo≈ô√≠me mapu s markery
        memory_map = create_map(memories)
        folium_static(memory_map, width=800, height=500)
        
        # V√Ωpis seznamu vzpom√≠nek
        st.markdown(f"### Seznam vzpom√≠nek ({len(memories)})")
        for idx, memory in enumerate(memories):
            # Ka≈æd√° vzpom√≠nka je v rozbalovac√≠m panelu
            with st.expander(f"{memory['location']} - {', '.join(memory['keywords'][:3])}"):
                st.write(memory['text'])
                st.caption(f"Sou≈ôadnice: {memory['latitude']}, {memory['longitude']}")
    else:
        # Pokud nejsou ≈æ√°dn√© vzpom√≠nky, zobraz√≠me pr√°zdnou mapu a informaci
        placeholder_map = create_map([])
        folium_static(placeholder_map, width=800, height=500)
        st.info("Zat√≠m zde nejsou ≈æ√°dn√© vzpom√≠nky. P≈ôidejte svou prvn√≠ vzpom√≠nku pomoc√≠ formul√°≈ôe vlevo.")

# Patiƒçka aplikace
st.markdown("---")
st.markdown(
    "<div style='text-align: center;'>"
    "MemoryMap AI ¬© 2023 | Vytvo≈ôeno pomoc√≠ Streamlit"
    "</div>",
    unsafe_allow_html=True
) 