"""
Risk Analyst Dashboard
=====================

Modern√≠ dashboard pro anal√Ωzu rizik v dodavatelsk√©m ≈ôetƒõzci.
Zamƒõ≈ôeno na monitoring z√°plav, dopravn√≠ch probl√©m≈Ø a jejich dopad na dodavatele.
"""

import streamlit as st
import folium
from folium.plugins import MarkerCluster
from streamlit_folium import folium_static
import pandas as pd
import requests
import json
from datetime import datetime, timedelta
import os

# Konfigurace str√°nky
st.set_page_config(
    page_title="Risk Analyst Dashboard",
    page_icon="‚ö†Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ƒåesk√© hranice pro filtrov√°n√≠ dat
CZECH_BOUNDS = {
    'min_lat': 48.5, 'max_lat': 51.1,
    'min_lon': 12.0, 'max_lon': 18.9
}

# Environment variables
BACKEND_URL = os.getenv('BACKEND_URL', 'https://risk-analyst.onrender.com')

# Konzistentn√≠ zobrazen√≠ hodnot
EVENT_TYPE_LABEL = {
    'flood': 'Povodnƒõ',
    'supply_chain': 'Dodavatelsk√Ω ≈ôetƒõzec',
    'weather': 'Poƒças√≠'
}

SEVERITY_LABEL = {
    'low': 'N√≠zk√°',
    'medium': 'St≈ôedn√≠',
    'high': 'Vysok√°',
    'critical': 'Kritick√°'
}

SOURCE_LABEL = {
    'rss': 'Zpravodajstv√≠ (RSS)',
    'chmi_api': 'ƒåHM√ö',
    'openmeteo': 'OpenMeteo',
}

def format_dt(value: str) -> str:
    try:
        # Podpora ISO form√°tu i bez 'T'
        v = value
        if isinstance(v, str):
            if 'T' in v:
                return datetime.fromisoformat(v.replace('Z', '+00:00')).strftime('%Y-%m-%d %H:%M')
            return v
        return str(v)
    except Exception:
        return str(value)

def is_in_czech_republic(lat, lon):
    """Kontrola, zda bod le≈æ√≠ v ƒåesk√© republice"""
    return (CZECH_BOUNDS['min_lat'] <= lat <= CZECH_BOUNDS['max_lat'] and
            CZECH_BOUNDS['min_lon'] <= lon <= CZECH_BOUNDS['max_lon'])

def sanitize_coords(lat, lon):
    """Heuristika: pokud bod nele≈æ√≠ v ƒåR, ale prohozen√≠ d√°v√° smysl, prohod√≠me (ƒçast√° chyba lat/lon)."""
    try:
        lat_f = float(lat)
        lon_f = float(lon)
    except Exception:
        return lat, lon
    if is_in_czech_republic(lat_f, lon_f):
        return lat_f, lon_f
    # Swap check
    if is_in_czech_republic(lon_f, lat_f):
        return lon_f, lat_f
    return lat_f, lon_f

def test_backend_connection():
    """Test p≈ôipojen√≠ k backendu"""
    try:
        response = requests.get(f"{BACKEND_URL}/api/health", timeout=10)
        return response.status_code == 200
    except:
        return False

@st.cache_data(ttl=120)
def get_risk_events():
    """Z√≠sk√°n√≠ rizikov√Ωch ud√°lost√≠ z API (s cachingem)"""
    try:
        response = requests.get(f"{BACKEND_URL}/api/risks", timeout=15)
        if response.status_code == 200:
            return response.json()
        else:
            return []
    except Exception:
        return []

@st.cache_data(ttl=300)
def get_suppliers():
    """Z√≠sk√°n√≠ dodavatel≈Ø z API (s cachingem)"""
    try:
        response = requests.get(f"{BACKEND_URL}/api/suppliers", timeout=15)
        if response.status_code == 200:
            return response.json()
        else:
            return []
    except Exception:
        return []

def get_advanced_analysis(lat: float, lon: float, supplier_id: int | None):
    """Z√≠sk√°n√≠ pokroƒçil√© anal√Ωzy pro zadanou lokaci / dodavatele"""
    try:
        flood_data = None
        geo_data = None
        # Simulace z√°plav (preferujeme vybran√©ho dodavatele)
        if supplier_id:
            resp = requests.get(
                f"{BACKEND_URL}/api/analysis/river-flood-simulation",
                params={"supplier_id": supplier_id, "flood_level_m": 2.0},
                timeout=25,
            )
            if resp.status_code == 200:
                flood_data = resp.json()
        else:
            # Bez dodavatele provedeme lehƒç√≠ geografickou anal√Ωzu pouze podle sou≈ôadnic
            resp = requests.get(
                f"{BACKEND_URL}/api/analysis/geographic-risk-assessment",
                params={"lat": lat, "lon": lon, "radius_km": 50},
                timeout=25,
            )
            if resp.status_code == 200:
                geo_data = resp.json()
        return flood_data, geo_data
    except Exception:
        return None, None

def create_risk_map(events, suppliers, flood_data=None, geo_data=None):
    """Vytvo≈ôen√≠ interaktivn√≠ mapy rizik"""
    
    # Centrum mapy na ƒåeskou republiku
    center_lat, center_lon = 49.8175, 15.4730
    zoom_start = 8
    
    # Vytvo≈ôen√≠ mapy
    m = folium.Map(
        location=[center_lat, center_lon],
        zoom_start=zoom_start,
        tiles='OpenStreetMap'
    )
    
    # P≈ôid√°n√≠ satelitn√≠ vrstvy
    folium.TileLayer(
        tiles='https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
        attr='Esri',
        name='Satelitn√≠ mapa',
        overlay=False
    ).add_to(m)
    
    # P≈ôid√°n√≠ OpenStreetMap vrstvy
    folium.TileLayer(
        tiles='OpenStreetMap',
        name='OpenStreetMap',
        overlay=False
    ).add_to(m)
    
    # P≈ôid√°n√≠ dodavatel≈Ø (modr√© znaƒçky) s clusteringem
    supplier_group = folium.FeatureGroup(name="üè≠ Dodavatel√©", show=True)
    supplier_cluster = MarkerCluster(name="üè≠ Dodavatel√© - cluster", show=True)
    
    for supplier in suppliers:
        if supplier.get('latitude') and supplier.get('longitude'):
            lat, lon = sanitize_coords(supplier['latitude'], supplier['longitude'])
            if not is_in_czech_republic(lat, lon):
                continue
            
            # Barva podle √∫rovnƒõ rizika
            risk_colors = {'low': 'green', 'medium': 'orange', 'high': 'red', 'critical': 'darkred'}
            color = risk_colors.get(supplier.get('risk_level', 'medium'), 'blue')
            
            popup_content = f"""
            <div style='width: 250px;'>
                <h4>üè≠ {supplier['name']}</h4>
                <p><strong>Kategorie:</strong> {supplier.get('category', 'Nezn√°m√©')}</p>
                <p><strong>√örove≈à rizika:</strong> {supplier.get('risk_level', 'Nezn√°m√©')}</p>
                <p><strong>P≈ôid√°no:</strong> {format_dt(supplier.get('created_at', 'Nezn√°m√©'))}</p>
                <p><strong>Sou≈ôadnice:</strong> {lat:.4f}, {lon:.4f}</p>
            </div>
            """
            
            folium.Marker(
                location=[lat, lon],
                popup=folium.Popup(popup_content, max_width=300),
                icon=folium.Icon(color=color, icon='industry', prefix='fa'),
                tooltip=f"üè≠ {supplier['name']} ({supplier.get('risk_level', 'N/A')})"
            ).add_to(supplier_cluster)
    
    supplier_cluster.add_to(supplier_group)
    supplier_group.add_to(m)
    
    # P≈ôid√°n√≠ rizikov√Ωch ud√°lost√≠ (ƒçerven√© znaƒçky) s clusteringem
    event_group = folium.FeatureGroup(name="‚ö†Ô∏è Rizikov√© ud√°losti", show=True)
    event_cluster = MarkerCluster(name="‚ö†Ô∏è Ud√°losti - cluster", show=True)
    
    for event in events:
        if event.get('latitude') and event.get('longitude'):
            lat, lon = sanitize_coords(event['latitude'], event['longitude'])
            if not is_in_czech_republic(lat, lon):
                continue
            
            # Barva podle z√°va≈ænosti
            severity_colors = {'low': 'green', 'medium': 'orange', 'high': 'red', 'critical': 'darkred'}
            color = severity_colors.get(event.get('severity', 'medium'), 'orange')
            
            # Vylep≈°en√Ω popup s odkazem na zdroj
            source_link = ""
            if event.get('url'):
                source_link = f"<p><strong>Zdroj:</strong> <a href='{event['url']}' target='_blank'>Otev≈ô√≠t zdroj</a></p>"
            
            popup_content = f"""
            <div style='width: 250px;'>
                <h4>‚ö†Ô∏è {event['title']}</h4>
                <p><strong>Typ:</strong> {EVENT_TYPE_LABEL.get(event.get('event_type'), event.get('event_type','Nezn√°m√©'))}</p>
                <p><strong>Z√°va≈ænost:</strong> {SEVERITY_LABEL.get(event.get('severity'), event.get('severity','Nezn√°m√©'))}</p>
                <p><strong>Datum:</strong> {format_dt(event.get('created_at', 'Nezn√°m√©'))}</p>
                <p><strong>Popis:</strong> {event.get('description', 'Bez popisu')}</p>
                <p><strong>Zdroj dat:</strong> {SOURCE_LABEL.get(event.get('source'), event.get('source','Nezn√°m√©'))}</p>
                <p><strong>Sou≈ôadnice:</strong> {lat:.4f}, {lon:.4f}</p>
                {source_link}
            </div>
            """
            
            folium.Marker(
                location=[lat, lon],
                popup=folium.Popup(popup_content, max_width=300),
                icon=folium.Icon(color=color, icon='exclamation-triangle', prefix='fa'),
                tooltip=f"‚ö†Ô∏è {event['title'][:30]}..."
            ).add_to(event_cluster)
    
    event_cluster.add_to(event_group)
    event_group.add_to(m)
    
    # P≈ôid√°n√≠ legendy
    legend_html = '''
    <div style="position: fixed; 
                bottom: 50px; left: 50px; width: 200px; height: 120px; 
                background-color: white; border:2px solid grey; z-index:9999; 
                font-size:14px; padding: 10px">
    <p><strong>üó∫Ô∏è Legenda</strong></p>
    <p>üè≠ <b>Dodavatel√©:</b></p>
    <p>&nbsp;&nbsp;üü¢ N√≠zk√© riziko</p>
    <p>&nbsp;&nbsp;üü† St≈ôedn√≠ riziko</p>
    <p>&nbsp;&nbsp;üî¥ Vysok√© riziko</p>
    <p>&nbsp;&nbsp;‚ö´ Kritick√© riziko</p>
    <p>‚ö†Ô∏è <b>Ud√°losti:</b></p>
    <p>&nbsp;&nbsp;üî¥ ƒåerven√© znaƒçky</p>
    </div>
    '''
    m.get_root().html.add_child(folium.Element(legend_html))
    
    # P≈ôid√°n√≠ ovl√°d√°n√≠ vrstev
    folium.LayerControl().add_to(m)
    
    # Pokus o p≈ôizp≈Øsoben√≠ v√Ω≈ôezu mapy na zobrazen√© objekty
    try:
        bounds = []
        for e in events:
            if e.get('latitude') and e.get('longitude'):
                lat, lon = sanitize_coords(e['latitude'], e['longitude'])
                if is_in_czech_republic(lat, lon):
                    bounds.append([lat, lon])
        for s in suppliers:
            if s.get('latitude') and s.get('longitude'):
                lat, lon = sanitize_coords(s['latitude'], s['longitude'])
                if is_in_czech_republic(lat, lon):
                    bounds.append([lat, lon])
        if bounds:
            m.fit_bounds(bounds, padding=(20, 20))
    except Exception:
        pass
    return m

def get_consistent_statistics(events, suppliers):
    """Z√≠sk√°n√≠ konzistentn√≠ch statistik pouze pro data v ƒåR"""
    czech_events = [e for e in events if e.get('latitude') and e.get('longitude') and 
                    is_in_czech_republic(e['latitude'], e['longitude'])]
    
    czech_suppliers = [s for s in suppliers if s.get('latitude') and s.get('longitude') and 
                       is_in_czech_republic(s['latitude'], s['longitude'])]
    
    return {
        'total_events': len(czech_events),
        'czech_events': len(czech_events),
        'total_suppliers': len(czech_suppliers),
        'czech_suppliers': len(czech_suppliers),
        'high_risk_suppliers': len([s for s in czech_suppliers if s.get('risk_level') in ['high', 'critical']]),
        'high_risk_percentage': len([s for s in czech_suppliers if s.get('risk_level') in ['high', 'critical']]) / len(czech_suppliers) * 100 if czech_suppliers else 0
    }

# Hlavn√≠ aplikace
def main():
    # Header
    st.title("‚ö†Ô∏è Risk Analyst Dashboard")
    st.markdown("**Modern√≠ monitoring rizik v dodavatelsk√©m ≈ôetƒõzci**")
    
    # Sidebar
    st.sidebar.header("üîß Ovl√°d√°n√≠")
    
    # Test p≈ôipojen√≠
    if test_backend_connection():
        st.sidebar.success("‚úÖ Backend p≈ôipojen")
    else:
        st.sidebar.error("‚ùå Backend nedostupn√Ω")
        st.error("‚ö†Ô∏è Aplikace nem≈Ø≈æe naƒç√≠st data. Zkontrolujte p≈ôipojen√≠ k backendu.")
        return
    
    # Filtry
    st.sidebar.subheader("üîç Filtry")
    show_only_cz = st.sidebar.toggle("Filtrovat pouze na ƒåR", value=False)
    
    # Typ ud√°losti
    event_types = ["V≈°echny", "flood", "supply_chain"]
    selected_event_type_label = st.sidebar.selectbox(
        "üìä Typ ud√°losti:", ["V≈°echny", "Povodnƒõ", "Dodavatelsk√Ω ≈ôetƒõzec"]
    )
    selected_event_type = {
        "V≈°echny": "V≈°echny",
        "Povodnƒõ": "flood",
        "Dodavatelsk√Ω ≈ôetƒõzec": "supply_chain",
    }[selected_event_type_label]
    
    # Z√°va≈ænost
    severity_levels = ["V≈°echny", "N√≠zk√°", "St≈ôedn√≠", "Vysok√°", "Kritick√°"]
    selected_severity_label = st.sidebar.selectbox("‚ö†Ô∏è Z√°va≈ænost:", severity_levels)
    severity_reverse = {
        "V≈°echny": "V≈°echny",
        "N√≠zk√°": "low",
        "St≈ôedn√≠": "medium",
        "Vysok√°": "high",
        "Kritick√°": "critical",
    }
    selected_severity = severity_reverse[selected_severity_label]
    
    # Naƒçten√≠ dat
    events = get_risk_events()
    suppliers = get_suppliers()
    # Rychl√© info do sidebaru pro diagnostiku
    st.sidebar.caption(f"Naƒçteno z API: ud√°losti={len(events)}, dodavatel√©={len(suppliers)}")
    
    # Filtrov√°n√≠ dat (typ/z√°va≈ænost)
    filtered_events = events
    if selected_event_type != "V≈°echny":
        filtered_events = [e for e in events if e.get('event_type') == selected_event_type]
    
    if selected_severity != "V≈°echny":
        filtered_events = [e for e in filtered_events if e.get('severity') == selected_severity]
    
    # Voliteln√© filtrov√°n√≠ pouze pro ƒåR (default: vypnuto => zobraz√≠me v≈°e)
    if show_only_cz:
        display_events = [e for e in filtered_events if e.get('latitude') and e.get('longitude') and 
                          is_in_czech_republic(e['latitude'], e['longitude'])]
        display_suppliers = [s for s in suppliers if s.get('latitude') and s.get('longitude') and 
                             is_in_czech_republic(s['latitude'], s['longitude'])]
    else:
        display_events = filtered_events
        display_suppliers = suppliers
    
    # Tabs
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["üó∫Ô∏è Mapa rizik", "üì∞ Scraping", "üè≠ Dodavatel√©", "üî¨ Pokroƒçil√° anal√Ωza", "‚ÑπÔ∏è O aplikaci"])
    
    # Tab 1: Mapa rizik
    with tab1:
        st.header("üó∫Ô∏è Mapa rizik")
        
        # Statistiky vzhledem k zobrazen√Ωm dat≈Øm
        stats = get_consistent_statistics(display_events if show_only_cz else display_events, 
                                          display_suppliers if show_only_cz else display_suppliers)
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üìä Ud√°losti (zobrazen√©)", len(display_events))
        with col2:
            st.metric("üè≠ Dodavatel√© (zobrazen√≠)", len(display_suppliers))
        with col3:
            st.metric("‚ö†Ô∏è Vysok√© riziko", f"{stats['high_risk_suppliers']} ({stats['high_risk_percentage']:.1f}%)")
        with col4:
            st.metric("üåç Celkem bod≈Ø na mapƒõ", len(display_events) + len(display_suppliers))
            st.info(f"üìä Zobrazeno: {len(display_events)} ud√°lost√≠ + {len(display_suppliers)} dodavatel≈Ø")
        
        # Mapa
        if display_events or display_suppliers:
            risk_map = create_risk_map(display_events, display_suppliers)
            folium_static(risk_map, width=1200, height=600)
        else:
            st.info("üìù Na mapƒõ nejsou zobrazena ≈æ√°dn√° data v ƒåesk√© republice.")
    
    # Tab 2: Scraping
    with tab2:
        st.header("üì∞ Automatick√Ω scraping")
        
        st.info("""
        **Jak funguje scraping:**
        
        üîç **CHMI API (poƒças√≠):** Monitoruje meteorologick√© v√Ωstrahy a extr√©mn√≠ poƒças√≠
        üì∞ **RSS feeds (ƒçesk√° m√©dia):** Sleduje zpr√°vy o z√°plav√°ch a dopravn√≠ch probl√©mech
        
        **V√Ωsledek:** Automatick√© vytvo≈ôen√≠ rizikov√Ωch ud√°lost√≠ v datab√°zi
        """)
        
        # Tlaƒç√≠tko pro spu≈°tƒõn√≠ scrapingu
        if st.button("üîÑ Spustit scraping", type="primary"):
            try:
                with st.spinner("üîç Prob√≠h√° scraping..."):
                    response = requests.get(f"{BACKEND_URL}/api/scrape/run-all", timeout=60)
                    
                if response.status_code == 200:
                    result = response.json()
                    st.success("‚úÖ Scraping dokonƒçen!")
                    
                    # Zobrazen√≠ v√Ωsledk≈Ø s lep≈°√≠m error handlingem
                    if 'results' in result:
                        results = result['results']
                        
                        # CHMI v√Ωsledky
                        if 'chmi' in results and results['chmi']:
                            chmi_result = results['chmi']
                            if chmi_result.get('status') == 'success':
                                st.info(f"üå§Ô∏è CHMI (poƒças√≠): {chmi_result.get('saved_count', 0)} nov√Ωch ud√°lost√≠")
                            else:
                                st.warning(f"‚ö†Ô∏è CHMI: {chmi_result.get('error', 'Nezn√°m√° chyba')}")
                        
                        # RSS v√Ωsledky
                        if 'rss' in results and results['rss']:
                            rss_result = results['rss']
                            if rss_result.get('status') == 'success':
                                st.info(f"üì∞ RSS (m√©dia): {rss_result.get('saved_count', 0)} nov√Ωch ud√°lost√≠")
                            else:
                                st.warning(f"‚ö†Ô∏è RSS: {rss_result.get('error', 'Nezn√°m√° chyba')}")
                        
                        # Testovac√≠ data
                        if 'test_data_created' in results and results['test_data_created'] > 0:
                            st.info(f"üìù Vytvo≈ôena testovac√≠ data: {results['test_data_created']} ud√°lost√≠")
                        
                        # Celkov√Ω souƒçet
                        total_saved = results.get('total_events_saved', 0)
                        if total_saved > 0:
                            st.success(f"‚úÖ Celkem ulo≈æeno: {total_saved} ud√°lost√≠")
                        else:
                            st.warning("‚ö†Ô∏è Nebyly nalezeny ≈æ√°dn√© nov√© ud√°losti")
                    
                    # Tlaƒç√≠tko pro obnoven√≠ zobrazen√≠
                    if st.button("üîÑ Obnovit zobrazen√≠"):
                        st.rerun()
                        
                else:
                    st.error(f"‚ùå Chyba p≈ôi scrapingu: {response.status_code}")
                    st.error(f"Odpovƒõƒè: {response.text[:200]}")
            except Exception as e:
                st.error(f"‚ùå Chyba: {str(e)}")
        
        # Zobrazen√≠ nejnovƒõj≈°√≠ch ud√°lost√≠
        if display_events:
            st.subheader("üìã Nejnovƒõj≈°√≠ ud√°losti")
            
            # Vytvo≈ôen√≠ DataFrame
            events_data = []
            for event in display_events[:10]:  # Pouze posledn√≠ch 10
                events_data.append({
                    'N√°zev': event.get('title', 'Bez n√°zvu'),
                    'Typ': EVENT_TYPE_LABEL.get(event.get('event_type'), event.get('event_type','Nezn√°m√©')),
                    'Z√°va≈ænost': SEVERITY_LABEL.get(event.get('severity'), event.get('severity','Nezn√°m√©')),
                    'Zdroj': SOURCE_LABEL.get(event.get('source'), event.get('source','Nezn√°m√©')),
                    'Datum': format_dt(event.get('created_at', 'Nezn√°m√©'))
                })
            
            if events_data:
                df_events = pd.DataFrame(events_data)
                st.dataframe(df_events, use_container_width=True)
            else:
                st.info("üìù ≈Ω√°dn√© ud√°losti k zobrazen√≠.")
        else:
            st.info("üìù ≈Ω√°dn√© ud√°losti k zobrazen√≠.")
    
    # Tab 3: Dodavatel√©
    with tab3:
        st.header("üè≠ Dodavatel√©")
        
        if display_suppliers:
            # Kl√≠ƒçov√© metriky
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üè≠ Zobrazen√≠ dodavatel√©", len(display_suppliers))
            with col2:
                st.metric("‚ö†Ô∏è Vysok√© riziko", f"{stats['high_risk_suppliers']} ({stats['high_risk_percentage']:.1f}%)")
            with col3:
                st.metric("üá®üáø Filtrov√°n√≠ ƒåR", "Zapnuto" if show_only_cz else "Vypnuto")
            
            # Tabulka dodavatel≈Ø
            st.subheader("üìã Seznam dodavatel≈Ø")
            
            suppliers_data = []
            for supplier in display_suppliers:
                suppliers_data.append({
                    'N√°zev dodavatele': supplier.get('name', 'Bez n√°zvu'),
                    'Kategorie': supplier.get('category', 'Nezn√°m√©'),
                    '√örove≈à rizika': supplier.get('risk_level', 'Nezn√°m√©'),
                    'Latitude': supplier.get('latitude'),
                    'Longitude': supplier.get('longitude'),
                    'Datum p≈ôid√°n√≠': format_dt(supplier.get('created_at', 'Nezn√°m√©'))
                })
            
            if suppliers_data:
                df_suppliers = pd.DataFrame(suppliers_data)
                st.dataframe(df_suppliers, use_container_width=True)
            else:
                st.info("üìù ≈Ω√°dn√≠ dodavatel√© k zobrazen√≠.")
        else:
            # Debug: pokud API vr√°tilo nƒõjak√© dodavatele, ale ≈æ√°dn√Ω nepro≈°el CZ filtrem, nab√≠dneme zobrazen√≠ v≈°ech
            if suppliers:
                st.warning("‚ö†Ô∏è ≈Ω√°dn√≠ dodavatel√© v r√°mci hranic ƒåR po aplikaci filtru.")
                if st.toggle("Zobrazit dodavatele bez filtru ƒåR"):
                    suppliers_data = []
                    for supplier in suppliers:
                        suppliers_data.append({
                            'N√°zev dodavatele': supplier.get('name', 'Bez n√°zvu'),
                            'Kategorie': supplier.get('category', 'Nezn√°m√©'),
                            '√örove≈à rizika': supplier.get('risk_level', 'Nezn√°m√©'),
                            'Latitude': supplier.get('latitude'),
                            'Longitude': supplier.get('longitude'),
                            'Datum p≈ôid√°n√≠': format_dt(supplier.get('created_at', 'Nezn√°m√©'))
                        })
                    if suppliers_data:
                        df_suppliers = pd.DataFrame(suppliers_data)
                        st.dataframe(df_suppliers, use_container_width=True)
            else:
                st.info("üìù ≈Ω√°dn√≠ dodavatel√© k zobrazen√≠.")
    
    # Tab 4: Pokroƒçil√° anal√Ωza
    with tab4:
        st.header("üî¨ Pokroƒçil√° anal√Ωza")
        
        st.info("""
        **Dostupn√© analytick√© n√°stroje:**
        
        üåä **Simulace z√°plav:** Anal√Ωza rizika z√°plav pro dodavatele na z√°kladƒõ vzd√°lenosti od ≈ôek
        üó∫Ô∏è **Geografick√° anal√Ωza:** Komplexn√≠ posouzen√≠ rizik pro libovolnou lokaci
        """)
        
        # Ovl√°d√°n√≠ pro anal√Ωzu: volba dodavatele / sou≈ôadnic
        st.subheader("üéØ Parametry anal√Ωzy")
        colp1, colp2 = st.columns(2)
        with colp1:
            supplier_names = [s.get('name') for s in suppliers]
            selected_supplier = st.selectbox("Vyberte dodavatele (voliteln√©)", ["‚Äî ≈æ√°dn√Ω ‚Äî"] + supplier_names)
            supplier_id = None
            if selected_supplier != "‚Äî ≈æ√°dn√Ω ‚Äî":
                for s in suppliers:
                    if s.get('name') == selected_supplier:
                        supplier_id = s.get('id')
                        lat_default, lon_default = s.get('latitude'), s.get('longitude')
                        break
            else:
                lat_default, lon_default = 50.0755, 14.4378  # Praha
        with colp2:
            lat = st.number_input("Latitude", value=float(lat_default), format="%.6f")
            lon = st.number_input("Longitude", value=float(lon_default), format="%.6f")

        run_analysis = st.button("üî¨ Spustit anal√Ωzu", type="primary")
        flood_data = geo_data = None
        if run_analysis:
            flood_data, geo_data = get_advanced_analysis(lat, lon, supplier_id)
        
        # Simulace z√°plav
        st.subheader("üåä Simulace z√°plav")

        if flood_data and flood_data.get('flood_analysis'):
            # Hromadn√° anal√Ωza (seznam)
            st.markdown("**üìä Top 3 nejohro≈æenƒõj≈°√≠ dodavatel√©:**")
            items = flood_data.get('flood_analysis') or []
            for i, analysis in enumerate(items[:3], 1):
                supplier_info = analysis.get('supplier', {}) or {}
                supplier_name = supplier_info.get('name', 'Nezn√°m√Ω dodavatel')
                with st.expander(f"#{i} {supplier_name}"):
                    col1, col2 = st.columns(2)
                    with col1:
                        flood_risk = analysis.get('flood_risk', {}) or {}
                        probability = flood_risk.get('probability', 0)
                        nearest_river = flood_risk.get('nearest_river_name', 'Nezn√°m√°')
                        river_distance = flood_risk.get('river_distance_km', 0)
                        impact_level = flood_risk.get('impact_level', 'Nezn√°m√©')
                        st.metric("Pravdƒõpodobnost z√°plav", f"{probability:.0%}")
                        st.metric("Nejbli≈æ≈°√≠ ≈ôeka", nearest_river)
                    with col2:
                        st.metric("Vzd√°lenost od ≈ôeky", f"{river_distance:.1f} km")
                        st.metric("√örove≈à rizika", impact_level)
        elif flood_data and flood_data.get('supplier'):
            # Detail pro jednoho dodavatele
            supplier_info = flood_data.get('supplier') or {}
            supplier_name = supplier_info.get('name', 'Nezn√°m√Ω dodavatel')
            flood_risk = flood_data.get('flood_simulation', {}) or {}
            st.markdown(f"**üìå {supplier_name}**")
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Pravdƒõpodobnost z√°plav", f"{flood_risk.get('probability', 0):.0%}")
                st.metric("Nejbli≈æ≈°√≠ ≈ôeka", flood_risk.get('nearest_river_name', 'Nezn√°m√°'))
            with col2:
                st.metric("Vzd√°lenost od ≈ôeky", f"{flood_risk.get('river_distance_km', 0):.1f} km")
                st.metric("√örove≈à rizika", flood_risk.get('impact_level', 'Nezn√°m√©'))
        else:
            st.info("‚ÑπÔ∏è Pro simulaci zvolte konkr√©tn√≠ho dodavatele nebo zkuste analyzovat podle sou≈ôadnic v sekci Geografick√° anal√Ωza.")
        
        # Geografick√° anal√Ωza
        st.subheader("üó∫Ô∏è Geografick√° anal√Ωza")
        
        if geo_data and geo_data.get('combined_risk_assessment') is not None:
            # Umo≈æn√≠me jak list, tak dict
            assess = geo_data.get('combined_risk_assessment')
            items = []
            if isinstance(assess, list):
                items = assess[:3]
            elif isinstance(assess, dict):
                # pokud m√° kl√≠ƒç 'items'
                if isinstance(assess.get('items'), list):
                    items = assess['items'][:3]
                else:
                    items = [assess]
            st.markdown("**üìä Top v√Ωsledky geografick√© anal√Ωzy:**")
            for i, analysis in enumerate(items, 1):
                risk_score = analysis.get('risk_score', 0)
                with st.expander(f"#{i} Risk Score: {risk_score:.1f}%"):
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("Risk Score", f"{risk_score:.1f}%")
                        st.metric("Vzd√°lenost od ≈ôeky", f"{analysis.get('river_distance_km', 0):.1f} km")
                    with col2:
                        st.metric("Nadmo≈ôsk√° v√Ω≈°ka", f"{analysis.get('elevation_m', 0):.0f} m")
                        st.metric("Historick√© ud√°losti", analysis.get('historical_events', 0))
                    st.info(f"üí° **Doporuƒçen√≠:** {analysis.get('recommendation', 'Nezn√°m√©')}")
        else:
            st.info("‚ÑπÔ∏è Zadejte sou≈ôadnice (lat/lon) a spus≈•te anal√Ωzu pro zobrazen√≠ v√Ωsledk≈Ø.")
    
    # Tab 5: O aplikaci
    with tab5:
        st.header("‚ÑπÔ∏è O aplikaci")
        
        st.markdown("""
        ## üéØ √öƒçel aplikace
        
        **Risk Analyst Dashboard** je modern√≠ n√°stroj pro monitoring a anal√Ωzu rizik v dodavatelsk√©m ≈ôetƒõzci.
        
        ### üöÄ Kl√≠ƒçov√© funkce
        
        ‚Ä¢ **üó∫Ô∏è Interaktivn√≠ mapa rizik** - Vizualizace ud√°lost√≠ a dodavatel≈Ø v ƒåR
        ‚Ä¢ **üì∞ Automatick√Ω scraping** - Monitoring CHMI a RSS feed≈Ø
        ‚Ä¢ **üè≠ Spr√°va dodavatel≈Ø** - P≈ôehled dodavatel≈Ø s hodnocen√≠m rizik
        ‚Ä¢ **üî¨ Pokroƒçil√° anal√Ωza** - Simulace z√°plav a geografick√° anal√Ωza
        ‚Ä¢ **üìä Real-time monitoring** - Aktu√°ln√≠ data z r≈Øzn√Ωch zdroj≈Ø
        
        ### üíº Praktick√© vyu≈æit√≠
        
        ‚Ä¢ **Identifikace rizikov√Ωch oblast√≠** - Monitoring z√°plav a dopravn√≠ch probl√©m≈Ø
        ‚Ä¢ **Hodnocen√≠ dodavatel≈Ø** - Anal√Ωza rizik podle lokace a kategorie
        ‚Ä¢ **Preventivn√≠ opat≈ôen√≠** - Vƒçasn√© varov√°n√≠ p≈ôed mo≈æn√Ωmi probl√©my
        ‚Ä¢ **Strategick√© pl√°nov√°n√≠** - V√Ωbƒõr bezpeƒçn√Ωch lokalit pro nov√© dodavatele
        
        ### üîç Filtry a jejich v√Ωznam
        
        **üìä Typ ud√°losti:** Kategorie rizikov√Ωch ud√°lost√≠ (z√°plavy, dodavatelsk√Ω ≈ôetƒõzec)
        **‚ö†Ô∏è Z√°va≈ænost:** √örove≈à rizika od n√≠zk√© po kritick√©
        **üìÖ ƒåasov√© obdob√≠:** Filtrov√°n√≠ podle data ud√°losti
        
        ### üõ†Ô∏è Technologie
        
        ‚Ä¢ **Frontend:** Streamlit (Python)
        ‚Ä¢ **Backend:** FastAPI (Python)
        ‚Ä¢ **Datab√°ze:** PostgreSQL s PostGIS
        ‚Ä¢ **Deployment:** Render.com (backend) + Streamlit Cloud (frontend)
        ‚Ä¢ **Mapy:** Folium (OpenStreetMap, Satelitn√≠)
        
        ### üìà V√Ωvoj
        
        Aplikace je neust√°le vyv√≠jena a vylep≈°ov√°na na z√°kladƒõ zpƒõtn√© vazby a nov√Ωch po≈æadavk≈Ø.
        """)
        
        st.markdown("---")
        st.markdown("¬© 2025 Risk Analyst Dashboard ¬∑ Backend: risk-analyst.onrender.com ¬∑ Frontend: aktu√°ln√≠ str√°nka")

if __name__ == "__main__":
    main() 