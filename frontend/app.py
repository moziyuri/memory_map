"""
Risk Analyst Dashboard
=====================

Modern√≠ dashboard pro anal√Ωzu rizik v dodavatelsk√©m ≈ôetƒõzci.
Zamƒõ≈ôeno na monitoring z√°plav, dopravn√≠ch probl√©m≈Ø a jejich dopad na dodavatele.
"""

import streamlit as st
import folium
from streamlit_folium import folium_static
import pandas as pd
import requests
import json
from datetime import datetime, timedelta
import os

# Konfigurace str√°nky
st.set_page_config(
    page_title="Risk Analyst Dashboard",
    page_icon="‚ö†Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ƒåesk√© hranice pro filtrov√°n√≠ dat
CZECH_BOUNDS = {
    'min_lat': 48.5, 'max_lat': 51.1,
    'min_lon': 12.0, 'max_lon': 18.9
}

# Environment variables
BACKEND_URL = os.getenv('BACKEND_URL', 'https://risk-analyst-backend.onrender.com')

def is_in_czech_republic(lat, lon):
    """Kontrola, zda bod le≈æ√≠ v ƒåesk√© republice"""
    return (CZECH_BOUNDS['min_lat'] <= lat <= CZECH_BOUNDS['max_lat'] and
            CZECH_BOUNDS['min_lon'] <= lon <= CZECH_BOUNDS['max_lon'])

def test_backend_connection():
    """Test p≈ôipojen√≠ k backendu"""
    try:
        response = requests.get(f"{BACKEND_URL}/api/health", timeout=10)
        return response.status_code == 200
    except:
        return False

def get_risk_events():
    """Z√≠sk√°n√≠ rizikov√Ωch ud√°lost√≠ z API"""
    try:
        response = requests.get(f"{BACKEND_URL}/api/risks", timeout=10)
        if response.status_code == 200:
            return response.json()
        else:
            st.sidebar.error(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ ud√°lost√≠: {response.status_code}")
            return []
    except Exception as e:
        st.sidebar.error(f"‚ùå Chyba p≈ôipojen√≠ k API: {str(e)}")
        return []

def get_suppliers():
    """Z√≠sk√°n√≠ dodavatel≈Ø z API"""
    try:
        response = requests.get(f"{BACKEND_URL}/api/suppliers", timeout=10)
        if response.status_code == 200:
            return response.json()
        else:
            st.sidebar.error(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ dodavatel≈Ø: {response.status_code}")
            return []
    except Exception as e:
        st.sidebar.error(f"‚ùå Chyba p≈ôipojen√≠ k API: {str(e)}")
        return []

def get_advanced_analysis():
    """Z√≠sk√°n√≠ pokroƒçil√© anal√Ωzy"""
    try:
        # Simulace z√°plav
        flood_response = requests.get(f"{BACKEND_URL}/api/analysis/river-flood-simulation", timeout=10)
        flood_data = flood_response.json() if flood_response.status_code == 200 else None
        
        # Geografick√° anal√Ωza
        geo_response = requests.get(f"{BACKEND_URL}/api/analysis/geographic-risk-assessment", timeout=10)
        geo_data = geo_response.json() if geo_response.status_code == 200 else None
        
        return flood_data, geo_data
    except Exception as e:
        st.sidebar.error(f"‚ùå Chyba p≈ôi pokroƒçil√© anal√Ωze: {str(e)}")
        return None, None

def create_risk_map(events, suppliers, flood_data=None, geo_data=None):
    """Vytvo≈ôen√≠ interaktivn√≠ mapy rizik"""
    
    # Centrum mapy na ƒåeskou republiku
    center_lat, center_lon = 49.8175, 15.4730
    zoom_start = 8
    
    # Vytvo≈ôen√≠ mapy
    m = folium.Map(
        location=[center_lat, center_lon],
        zoom_start=zoom_start,
        tiles='OpenStreetMap'
    )
    
    # P≈ôid√°n√≠ satelitn√≠ vrstvy
    folium.TileLayer(
        tiles='https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
        attr='Esri',
        name='Satelitn√≠ mapa',
        overlay=False
    ).add_to(m)
    
    # P≈ôid√°n√≠ OpenStreetMap vrstvy
    folium.TileLayer(
        tiles='OpenStreetMap',
        name='OpenStreetMap',
        overlay=False
    ).add_to(m)
    
    # P≈ôid√°n√≠ dodavatel≈Ø (modr√© znaƒçky)
    for supplier in suppliers:
        if supplier.get('location') and is_in_czech_republic(supplier['location']['coordinates'][1], supplier['location']['coordinates'][0]):
            lat = supplier['location']['coordinates'][1]
            lon = supplier['location']['coordinates'][0]
            
            # Barva podle √∫rovnƒõ rizika
            risk_colors = {'low': 'green', 'medium': 'orange', 'high': 'red', 'critical': 'darkred'}
            color = risk_colors.get(supplier.get('risk_level', 'medium'), 'blue')
            
            popup_content = f"""
            <div style='width: 250px;'>
                <h4>üè≠ {supplier['name']}</h4>
                <p><strong>Kategorie:</strong> {supplier.get('category', 'Nezn√°m√©')}</p>
                <p><strong>√örove≈à rizika:</strong> {supplier.get('risk_level', 'Nezn√°m√©')}</p>
                <p><strong>P≈ôid√°no:</strong> {supplier.get('created_at', 'Nezn√°m√©')}</p>
            </div>
            """
            
            folium.Marker(
                location=[lat, lon],
                popup=folium.Popup(popup_content, max_width=300),
                icon=folium.Icon(color=color, icon='industry', prefix='fa'),
                tooltip=f"üè≠ {supplier['name']}"
            ).add_to(m)
    
    # P≈ôid√°n√≠ rizikov√Ωch ud√°lost√≠ (ƒçerven√© znaƒçky)
    for event in events:
        if event.get('location') and is_in_czech_republic(event['location']['coordinates'][1], event['location']['coordinates'][0]):
            lat = event['location']['coordinates'][1]
            lon = event['location']['coordinates'][0]
            
            # Barva podle z√°va≈ænosti
            severity_colors = {'low': 'lightred', 'medium': 'red', 'high': 'darkred', 'critical': 'black'}
            color = severity_colors.get(event.get('severity', 'medium'), 'red')
            
            popup_content = f"""
            <div style='width: 250px;'>
                <h4>‚ö†Ô∏è {event['title']}</h4>
                <p><strong>Typ:</strong> {event.get('event_type', 'Nezn√°m√©')}</p>
                <p><strong>Z√°va≈ænost:</strong> {event.get('severity', 'Nezn√°m√©')}</p>
                <p><strong>Zdroj:</strong> {event.get('source', 'Nezn√°m√©')}</p>
                <p><strong>Datum:</strong> {event.get('created_at', 'Nezn√°m√©')}</p>
                <p><strong>Popis:</strong> {event.get('description', 'Bez popisu')}</p>
            </div>
            """
            
            folium.Marker(
                location=[lat, lon],
                popup=folium.Popup(popup_content, max_width=300),
                icon=folium.Icon(color=color, icon='exclamation-triangle', prefix='fa'),
                tooltip=f"‚ö†Ô∏è {event['title'][:30]}..."
            ).add_to(m)
    
    # P≈ôid√°n√≠ v√Ωsledk≈Ø pokroƒçil√© anal√Ωzy
    if flood_data and flood_data.get('flood_analysis'):
        for analysis in flood_data['flood_analysis'][:3]:  # Pouze top 3
            if analysis.get('supplier_location'):
                lat = analysis['supplier_location']['lat']
                lon = analysis['supplier_location']['lon']
                
                popup_content = f"""
                <div style='width: 250px;'>
                    <h4>üåä Simulace z√°plav</h4>
                    <p><strong>Dodavatel:</strong> {analysis.get('supplier_name', 'Nezn√°m√©')}</p>
                    <p><strong>Pravdƒõpodobnost:</strong> {analysis.get('flood_probability', 0):.1%}</p>
                    <p><strong>Nejbli≈æ≈°√≠ ≈ôeka:</strong> {analysis.get('nearest_river_name', 'Nezn√°m√°')}</p>
                    <p><strong>Vzd√°lenost:</strong> {analysis.get('river_distance_km', 0):.1f} km</p>
                    <p><strong>√örove≈à rizika:</strong> {analysis.get('impact_level', 'Nezn√°m√©')}</p>
                </div>
                """
                
                folium.Marker(
                    location=[lat, lon],
                    popup=folium.Popup(popup_content, max_width=300),
                    icon=folium.Icon(color='red', icon='tint', prefix='fa'),
                    tooltip=f"üåä {analysis.get('supplier_name', 'Simulace z√°plav')}"
                ).add_to(m)
    
    if geo_data and geo_data.get('combined_risk_assessment'):
        for analysis in geo_data['combined_risk_assessment'][:3]:  # Pouze top 3
            if analysis.get('location'):
                lat = analysis['location']['lat']
                lon = analysis['location']['lon']
                
                # Barva podle risk score
                risk_score = analysis.get('risk_score', 0)
                if risk_score > 70:
                    color = 'darkred'
                elif risk_score > 40:
                    color = 'red'
                elif risk_score > 20:
                    color = 'orange'
                else:
                    color = 'green'
                
                popup_content = f"""
                <div style='width: 250px;'>
                    <h4>üó∫Ô∏è Geografick√° anal√Ωza</h4>
                    <p><strong>Risk Score:</strong> {risk_score:.1f}%</p>
                    <p><strong>Vzd√°lenost od ≈ôeky:</strong> {analysis.get('river_distance_km', 0):.1f} km</p>
                    <p><strong>Nadmo≈ôsk√° v√Ω≈°ka:</strong> {analysis.get('elevation_m', 0):.0f} m</p>
                    <p><strong>Historick√© ud√°losti:</strong> {analysis.get('historical_events', 0)}</p>
                    <p><strong>Doporuƒçen√≠:</strong> {analysis.get('recommendation', 'Nezn√°m√©')}</p>
                </div>
                """
                
                folium.Marker(
                    location=[lat, lon],
                    popup=folium.Popup(popup_content, max_width=300),
                    icon=folium.Icon(color=color, icon='map-marker', prefix='fa'),
                    tooltip=f"üó∫Ô∏è Risk Score: {risk_score:.1f}%"
                ).add_to(m)
    
    # P≈ôid√°n√≠ ovl√°d√°n√≠ vrstev
    folium.LayerControl().add_to(m)
    
    return m

def get_consistent_statistics(events, suppliers):
    """Z√≠sk√°n√≠ konzistentn√≠ch statistik pouze pro data v ƒåR"""
    czech_events = [e for e in events if e.get('location') and 
                    is_in_czech_republic(e['location']['coordinates'][1], e['location']['coordinates'][0])]
    
    czech_suppliers = [s for s in suppliers if s.get('location') and 
                       is_in_czech_republic(s['location']['coordinates'][1], s['location']['coordinates'][0])]
    
    return {
        'total_events': len(czech_events),
        'czech_events': len(czech_events),
        'total_suppliers': len(czech_suppliers),
        'czech_suppliers': len(czech_suppliers),
        'high_risk_suppliers': len([s for s in czech_suppliers if s.get('risk_level') in ['high', 'critical']]),
        'high_risk_percentage': len([s for s in czech_suppliers if s.get('risk_level') in ['high', 'critical']]) / len(czech_suppliers) * 100 if czech_suppliers else 0
    }

# Hlavn√≠ aplikace
def main():
    # Header
    st.title("‚ö†Ô∏è Risk Analyst Dashboard")
    st.markdown("**Modern√≠ monitoring rizik v dodavatelsk√©m ≈ôetƒõzci**")
    
    # Sidebar
    st.sidebar.header("üîß Ovl√°d√°n√≠")
    
    # Test p≈ôipojen√≠
    if test_backend_connection():
        st.sidebar.success("‚úÖ Backend p≈ôipojen")
    else:
        st.sidebar.error("‚ùå Backend nedostupn√Ω")
        st.error("‚ö†Ô∏è Aplikace nem≈Ø≈æe naƒç√≠st data. Zkontrolujte p≈ôipojen√≠ k backendu.")
        return
    
    # Filtry
    st.sidebar.subheader("üîç Filtry")
    
    # Typ ud√°losti
    event_types = ["V≈°echny", "flood", "supply_chain"]
    selected_event_type = st.sidebar.selectbox("üìä Typ ud√°losti:", event_types)
    
    # Z√°va≈ænost
    severity_levels = ["V≈°echny", "low", "medium", "high", "critical"]
    selected_severity = st.sidebar.selectbox("‚ö†Ô∏è Z√°va≈ænost:", severity_levels)
    
    # ƒåasov√© obdob√≠
    time_periods = ["V≈°echny", "Dnes", "Posledn√≠ t√Ωden", "Posledn√≠ mƒõs√≠c"]
    selected_period = st.sidebar.selectbox("üìÖ ƒåasov√© obdob√≠:", time_periods)
    
    # Naƒçten√≠ dat
    events = get_risk_events()
    suppliers = get_suppliers()
    
    # Filtrov√°n√≠ dat
    filtered_events = events
    if selected_event_type != "V≈°echny":
        filtered_events = [e for e in events if e.get('event_type') == selected_event_type]
    
    if selected_severity != "V≈°echny":
        filtered_events = [e for e in filtered_events if e.get('severity') == selected_severity]
    
    # Filtrov√°n√≠ pouze pro ƒåR
    czech_events = [e for e in filtered_events if e.get('location') and 
                    is_in_czech_republic(e['location']['coordinates'][1], e['location']['coordinates'][0])]
    
    czech_suppliers = [s for s in suppliers if s.get('location') and 
                       is_in_czech_republic(s['location']['coordinates'][1], s['location']['coordinates'][0])]
    
    # Tabs
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["üó∫Ô∏è Mapa rizik", "üì∞ Scraping", "üè≠ Dodavatel√©", "üî¨ Pokroƒçil√° anal√Ωza", "‚ÑπÔ∏è O aplikaci"])
    
    # Tab 1: Mapa rizik
    with tab1:
        st.header("üó∫Ô∏è Mapa rizik")
        
        # Statistiky
        stats = get_consistent_statistics(czech_events, czech_suppliers)
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üìä Ud√°losti v ƒåR", stats['czech_events'])
        with col2:
            st.metric("üè≠ Dodavatel√© v ƒåR", stats['czech_suppliers'])
        with col3:
            st.metric("‚ö†Ô∏è Vysok√© riziko", f"{stats['high_risk_suppliers']} ({stats['high_risk_percentage']:.1f}%)")
        with col4:
            st.metric("üåç Celkem bod≈Ø na mapƒõ", len(czech_events) + len(czech_suppliers))
        
        # Mapa
        if czech_events or czech_suppliers:
            risk_map = create_risk_map(czech_events, czech_suppliers)
            folium_static(risk_map, width=1200, height=600)
        else:
            st.info("üìù Na mapƒõ nejsou zobrazena ≈æ√°dn√° data v ƒåesk√© republice.")
    
    # Tab 2: Scraping
    with tab2:
        st.header("üì∞ Automatick√Ω scraping")
        
        st.info("""
        **Jak funguje scraping:**
        
        üîç **CHMI API (poƒças√≠):** Monitoruje meteorologick√© v√Ωstrahy a extr√©mn√≠ poƒças√≠
        üì∞ **RSS feeds (ƒçesk√° m√©dia):** Sleduje zpr√°vy o z√°plav√°ch a dopravn√≠ch probl√©mech
        
        **V√Ωsledek:** Automatick√© vytvo≈ôen√≠ rizikov√Ωch ud√°lost√≠ v datab√°zi
        """)
        
        # Tlaƒç√≠tko pro spu≈°tƒõn√≠ scrapingu
        if st.button("üîÑ Spustit scraping", type="primary"):
            try:
                response = requests.post(f"{BACKEND_URL}/api/scrape", timeout=30)
                if response.status_code == 200:
                    result = response.json()
                    st.success("‚úÖ Scraping dokonƒçen!")
                    
                    # Zobrazen√≠ v√Ωsledk≈Ø
                    if 'chmi_events' in result:
                        st.info(f"üå§Ô∏è CHMI (poƒças√≠): {len(result['chmi_events'])} nov√Ωch ud√°lost√≠")
                    
                    if 'rss_events' in result:
                        st.info(f"üì∞ RSS (m√©dia): {len(result['rss_events'])} nov√Ωch ud√°lost√≠")
                    
                    st.rerun()
                else:
                    st.error(f"‚ùå Chyba p≈ôi scrapingu: {response.status_code}")
            except Exception as e:
                st.error(f"‚ùå Chyba: {str(e)}")
        
        # Zobrazen√≠ nejnovƒõj≈°√≠ch ud√°lost√≠
        if czech_events:
            st.subheader("üìã Nejnovƒõj≈°√≠ ud√°losti")
            
            # Vytvo≈ôen√≠ DataFrame
            events_data = []
            for event in czech_events[:10]:  # Pouze posledn√≠ch 10
                events_data.append({
                    'N√°zev': event.get('title', 'Bez n√°zvu'),
                    'Typ': event.get('event_type', 'Nezn√°m√©'),
                    'Z√°va≈ænost': event.get('severity', 'Nezn√°m√©'),
                    'Zdroj': event.get('source', 'Nezn√°m√©'),
                    'Datum': event.get('created_at', 'Nezn√°m√©')
                })
            
            if events_data:
                df_events = pd.DataFrame(events_data)
                st.dataframe(df_events, use_container_width=True)
            else:
                st.info("üìù ≈Ω√°dn√© ud√°losti k zobrazen√≠.")
        else:
            st.info("üìù ≈Ω√°dn√© ud√°losti k zobrazen√≠.")
    
    # Tab 3: Dodavatel√©
    with tab3:
        st.header("üè≠ Dodavatel√©")
        
        if czech_suppliers:
            # Kl√≠ƒçov√© metriky
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üè≠ Celkem dodavatel≈Ø", stats['czech_suppliers'])
            with col2:
                st.metric("‚ö†Ô∏è Vysok√© riziko", f"{stats['high_risk_suppliers']} ({stats['high_risk_percentage']:.1f}%)")
            with col3:
                st.metric("üá®üáø V ƒåR", stats['czech_suppliers'])
            
            # Tabulka dodavatel≈Ø
            st.subheader("üìã Seznam dodavatel≈Ø")
            
            suppliers_data = []
            for supplier in czech_suppliers:
                suppliers_data.append({
                    'N√°zev dodavatele': supplier.get('name', 'Bez n√°zvu'),
                    'Kategorie': supplier.get('category', 'Nezn√°m√©'),
                    '√örove≈à rizika': supplier.get('risk_level', 'Nezn√°m√©'),
                    'Datum p≈ôid√°n√≠': supplier.get('created_at', 'Nezn√°m√©')
                })
            
            if suppliers_data:
                df_suppliers = pd.DataFrame(suppliers_data)
                st.dataframe(df_suppliers, use_container_width=True)
            else:
                st.info("üìù ≈Ω√°dn√≠ dodavatel√© k zobrazen√≠.")
        else:
            st.info("üìù ≈Ω√°dn√≠ dodavatel√© k zobrazen√≠.")
    
    # Tab 4: Pokroƒçil√° anal√Ωza
    with tab4:
        st.header("üî¨ Pokroƒçil√° anal√Ωza")
        
        st.info("""
        **Dostupn√© analytick√© n√°stroje:**
        
        üåä **Simulace z√°plav:** Anal√Ωza rizika z√°plav pro dodavatele na z√°kladƒõ vzd√°lenosti od ≈ôek
        üó∫Ô∏è **Geografick√° anal√Ωza:** Komplexn√≠ posouzen√≠ rizik pro libovolnou lokaci
        """)
        
        # Z√≠sk√°n√≠ dat pro pokroƒçilou anal√Ωzu
        flood_data, geo_data = get_advanced_analysis()
        
        # Simulace z√°plav
        st.subheader("üåä Simulace z√°plav")
        st.markdown("""
        <div style='background-color: #FFF3E0; padding: 15px; border-radius: 10px; margin-bottom: 20px;'>
            <h4 style='color: #F57C00; margin-top: 0;'>üí° Jak funguje simulace z√°plav</h4>
            <p style='margin: 5px 0; font-size: 0.9em;'>
                <strong>üéØ C√≠l:</strong> Simulace dopad≈Ø povodn√≠ na konkr√©tn√≠ dodavatele<br>
                <strong>üìä Metodika:</strong> Anal√Ωza vzd√°lenosti od polygon≈Ø ≈ôek + nadmo≈ôsk√° v√Ω≈°ka<br>
                <strong>‚ö†Ô∏è V√Ωstup:</strong> Pravdƒõpodobnost z√°plav pro ka≈æd√©ho dodavatele<br>
                <strong>üí° Praktick√Ω v√Ωznam:</strong> Identifikace dodavatel≈Ø ohro≈æen√Ωch povodnƒõmi<br>
                <strong>üó∫Ô∏è Vizualizace:</strong> V√Ωsledky se zobraz√≠ na mapƒõ s ƒçerven√Ωmi znaƒçkami (üåä)
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        if flood_data and flood_data.get('flood_analysis'):
            # Zobrazen√≠ top 3 v√Ωsledk≈Ø
            st.markdown("**üìä Top 3 nejohro≈æenƒõj≈°√≠ dodavatel√©:**")
            
            for i, analysis in enumerate(flood_data['flood_analysis'][:3], 1):
                with st.expander(f"#{i} {analysis.get('supplier_name', 'Nezn√°m√Ω dodavatel')}"):
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("Pravdƒõpodobnost z√°plav", f"{analysis.get('flood_probability', 0):.1%}")
                        st.metric("Nejbli≈æ≈°√≠ ≈ôeka", analysis.get('nearest_river_name', 'Nezn√°m√°'))
                    with col2:
                        st.metric("Vzd√°lenost od ≈ôeky", f"{analysis.get('river_distance_km', 0):.1f} km")
                        st.metric("√örove≈à rizika", analysis.get('impact_level', 'Nezn√°m√©'))
        else:
            st.warning("‚ö†Ô∏è Data pro simulaci z√°plav nejsou dostupn√°.")
        
        # Geografick√° anal√Ωza
        st.subheader("üó∫Ô∏è Geografick√° anal√Ωza")
        st.markdown("""
        <div style='background-color: #E8F5E8; padding: 15px; border-radius: 10px; margin-bottom: 20px;'>
            <h4 style='color: #4CAF50; margin-top: 0;'>üí° Jak funguje geografick√° anal√Ωza</h4>
            <p style='margin: 5px 0; font-size: 0.9em;'>
                <strong>üéØ C√≠l:</strong> Komplexn√≠ posouzen√≠ rizik pro libovolnou lokaci<br>
                <strong>üìä Metodika:</strong> Kombinace anal√Ωzy ≈ôek + ter√©nu + historick√Ωch ud√°lost√≠<br>
                <strong>‚ö†Ô∏è V√Ωstup:</strong> Celkov√Ω risk score a doporuƒçen√≠ pro lokaci<br>
                <strong>üí° Praktick√Ω v√Ωznam:</strong> V√Ωbƒõr bezpeƒçn√Ωch lokalit pro nov√© dodavatele<br>
                <strong>üó∫Ô∏è Vizualizace:</strong> V√Ωsledky se zobraz√≠ na mapƒõ s barevn√Ωm k√≥dov√°n√≠m (üó∫Ô∏è)
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # P≈ôid√°n√≠ srovn√°n√≠ n√°stroj≈Ø
        st.markdown("""
        <div style='background-color: #FFF8E1; padding: 15px; border-radius: 10px; margin-bottom: 20px;'>
            <h4 style='color: #F57C00; margin-top: 0;'>üìä Srovn√°n√≠ analytick√Ωch n√°stroj≈Ø</h4>
            <div style='display: flex; justify-content: space-between; margin: 10px 0;'>
                <div style='flex: 1; margin-right: 20px;'>
                    <strong>üåä Simulace z√°plav:</strong><br>
                    ‚Ä¢ Zamƒõ≈ôeno na dodavatele<br>
                    ‚Ä¢ Anal√Ωza polygon≈Ø ≈ôek<br>
                    ‚Ä¢ V√Ωstup: pravdƒõpodobnost z√°plav<br>
                    ‚Ä¢ Praktick√© vyu≈æit√≠: identifikace ohro≈æen√Ωch dodavatel≈Ø
                </div>
                <div style='flex: 1;'>
                    <strong>üó∫Ô∏è Geografick√° anal√Ωza:</strong><br>
                    ‚Ä¢ Zamƒõ≈ôeno na lokace<br>
                    ‚Ä¢ Kombinace v√≠ce faktor≈Ø<br>
                    ‚Ä¢ V√Ωstup: celkov√Ω risk score<br>
                    ‚Ä¢ Praktick√© vyu≈æit√≠: v√Ωbƒõr bezpeƒçn√Ωch lokalit
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        if geo_data and geo_data.get('combined_risk_assessment'):
            # Zobrazen√≠ top 3 v√Ωsledk≈Ø
            st.markdown("**üìä Top 3 nejrizikovƒõj≈°√≠ lokace:**")
            
            for i, analysis in enumerate(geo_data['combined_risk_assessment'][:3], 1):
                with st.expander(f"#{i} Risk Score: {analysis.get('risk_score', 0):.1f}%"):
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("Risk Score", f"{analysis.get('risk_score', 0):.1f}%")
                        st.metric("Vzd√°lenost od ≈ôeky", f"{analysis.get('river_distance_km', 0):.1f} km")
                    with col2:
                        st.metric("Nadmo≈ôsk√° v√Ω≈°ka", f"{analysis.get('elevation_m', 0):.0f} m")
                        st.metric("Historick√© ud√°losti", analysis.get('historical_events', 0))
                    
                    st.info(f"üí° **Doporuƒçen√≠:** {analysis.get('recommendation', 'Nezn√°m√©')}")
        else:
            st.warning("‚ö†Ô∏è Data pro geografickou anal√Ωzu nejsou dostupn√°.")
    
    # Tab 5: O aplikaci
    with tab5:
        st.header("‚ÑπÔ∏è O aplikaci")
        
        st.markdown("""
        ## üéØ √öƒçel aplikace
        
        **Risk Analyst Dashboard** je modern√≠ n√°stroj pro monitoring a anal√Ωzu rizik v dodavatelsk√©m ≈ôetƒõzci.
        
        ### üöÄ Kl√≠ƒçov√© funkce
        
        ‚Ä¢ **üó∫Ô∏è Interaktivn√≠ mapa rizik** - Vizualizace ud√°lost√≠ a dodavatel≈Ø v ƒåR
        ‚Ä¢ **üì∞ Automatick√Ω scraping** - Monitoring CHMI a RSS feed≈Ø
        ‚Ä¢ **üè≠ Spr√°va dodavatel≈Ø** - P≈ôehled dodavatel≈Ø s hodnocen√≠m rizik
        ‚Ä¢ **üî¨ Pokroƒçil√° anal√Ωza** - Simulace z√°plav a geografick√° anal√Ωza
        ‚Ä¢ **üìä Real-time monitoring** - Aktu√°ln√≠ data z r≈Øzn√Ωch zdroj≈Ø
        
        ### üíº Praktick√© vyu≈æit√≠
        
        ‚Ä¢ **Identifikace rizikov√Ωch oblast√≠** - Monitoring z√°plav a dopravn√≠ch probl√©m≈Ø
        ‚Ä¢ **Hodnocen√≠ dodavatel≈Ø** - Anal√Ωza rizik podle lokace a kategorie
        ‚Ä¢ **Preventivn√≠ opat≈ôen√≠** - Vƒçasn√© varov√°n√≠ p≈ôed mo≈æn√Ωmi probl√©my
        ‚Ä¢ **Strategick√© pl√°nov√°n√≠** - V√Ωbƒõr bezpeƒçn√Ωch lokalit pro nov√© dodavatele
        
        ### üîç Filtry a jejich v√Ωznam
        
        **üìä Typ ud√°losti:** Kategorie rizikov√Ωch ud√°lost√≠ (z√°plavy, dodavatelsk√Ω ≈ôetƒõzec)
        **‚ö†Ô∏è Z√°va≈ænost:** √örove≈à rizika od n√≠zk√© po kritick√©
        **üìÖ ƒåasov√© obdob√≠:** Filtrov√°n√≠ podle data ud√°losti
        
        ### üõ†Ô∏è Technologie
        
        ‚Ä¢ **Frontend:** Streamlit (Python)
        ‚Ä¢ **Backend:** FastAPI (Python)
        ‚Ä¢ **Datab√°ze:** PostgreSQL s PostGIS
        ‚Ä¢ **Deployment:** Render.com
        ‚Ä¢ **Mapy:** Folium (OpenStreetMap, Satelitn√≠)
        
        ### üìà V√Ωvoj
        
        Aplikace je neust√°le vyv√≠jena a vylep≈°ov√°na na z√°kladƒõ zpƒõtn√© vazby a nov√Ωch po≈æadavk≈Ø.
        """)
        
        st.markdown("---")
        st.markdown("¬© 2025 Risk Analyst Dashboard")

if __name__ == "__main__":
    main()
    