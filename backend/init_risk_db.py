"""
Inicializace datab√°ze pro Risk Analyst feature
"""
import psycopg2
import os
import sys

def init_risk_db():
    """Inicializuje datab√°zi pro risk analyst feature"""
    
    print("üöÄ Spou≈°t√≠m inicializaci risk analyst datab√°ze...")
    
    # Zkus√≠me environment variable, pak fallback
    database_url = os.getenv('RISK_DATABASE_URL')
    
    if database_url:
        print(f"‚úÖ Pou≈æ√≠v√°m RISK_DATABASE_URL: {database_url[:20]}...")
        try:
            conn = psycopg2.connect(database_url, sslmode='require')
        except Exception as e:
            print(f"‚ùå Chyba p≈ôi p≈ôipojen√≠ p≈ôes DATABASE_URL: {str(e)}")
            return False
    else:
        print("‚ö†Ô∏è RISK_DATABASE_URL nen√≠ nastavena, pou≈æ√≠v√°m hardcoded hodnoty")
        # Fallback na hardcoded hodnoty
        host = "dpg-d2a54tp5pdvs73acu64g-a.frankfurt-postgres.render.com"
        port = "5432"
        dbname = "risk_analyst"
        user = "risk_analyst_user"
        password = "uN3Zogp6tvoTmnjNV4owD92Nnm6UlGkf"
        
        try:
            conn = psycopg2.connect(
                host=host,
                port=port,
                dbname=dbname,
                user=user,
                password=password,
                sslmode='require'
            )
        except Exception as e:
            print(f"‚ùå Chyba p≈ôi p≈ôipojen√≠: {str(e)}")
            return False
    
    print("‚úÖ P≈ôipojen√≠ k datab√°zi √∫spƒõ≈°n√©!")
    
    try:
        cur = conn.cursor()
        
        # 1. Kontrola PostGIS
        print("üìä Kontroluji PostGIS...")
        try:
            cur.execute("SELECT PostGIS_Version()")
            version = cur.fetchone()[0]
            print(f"‚úÖ PostGIS verze: {version}")
        except Exception as e:
            print(f"‚ùå PostGIS chyba: {str(e)}")
            return False
        
        # 2. Vytvo≈ôen√≠ tabulek
        print("üèóÔ∏è Vytv√°≈ô√≠m tabulky...")
        
        # Tabulka risk_events
        cur.execute("""
            CREATE TABLE IF NOT EXISTS risk_events (
                id SERIAL PRIMARY KEY,
                title VARCHAR(255) NOT NULL,
                description TEXT,
                location POINT,  -- Geografick√° pozice
                event_type VARCHAR(50), -- 'flood', 'protest', 'supply_chain', 'geopolitical'
                severity VARCHAR(20), -- 'low', 'medium', 'high', 'critical'
                source VARCHAR(100), -- 'chmi_api', 'rss', 'manual', 'copernicus'
                url TEXT, -- Zdroj dat
                scraped_at TIMESTAMP DEFAULT NOW(),
                created_at TIMESTAMP DEFAULT NOW()
            );
        """)
        print("‚úÖ Tabulka risk_events vytvo≈ôena/zkontrolov√°na")
        
        # Tabulka vw_suppliers
        cur.execute("""
            CREATE TABLE IF NOT EXISTS vw_suppliers (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                location POINT,  -- Geografick√° pozice
                category VARCHAR(100), -- 'electronics', 'tires', 'steering', 'brakes'
                risk_level VARCHAR(20), -- 'low', 'medium', 'high', 'critical'
                created_at TIMESTAMP DEFAULT NOW()
            );
        """)
        print("‚úÖ Tabulka vw_suppliers vytvo≈ôena/zkontrolov√°na")
        
        # 3. Vytvo≈ôen√≠ geografick√Ωch index≈Ø
        print("üó∫Ô∏è Vytv√°≈ô√≠m geografick√© indexy...")
        try:
            cur.execute("CREATE INDEX IF NOT EXISTS idx_risk_events_location ON risk_events USING GIST (location);")
            cur.execute("CREATE INDEX IF NOT EXISTS idx_suppliers_location ON vw_suppliers USING GIST (location);")
            print("‚úÖ Geografick√© indexy vytvo≈ôeny")
        except Exception as e:
            print(f"‚ö†Ô∏è Chyba p≈ôi vytv√°≈ôen√≠ index≈Ø: {str(e)}")
        
        # 4. Vytvo≈ôen√≠ funkce pro v√Ωpoƒçet rizik
        print("üßÆ Vytv√°≈ô√≠m funkci pro v√Ωpoƒçet rizik...")
        cur.execute("""
            CREATE OR REPLACE FUNCTION calculate_risk_in_radius(
                lat DOUBLE PRECISION,
                lon DOUBLE PRECISION,
                radius_km INTEGER
            ) RETURNS TABLE (
                event_count INTEGER,
                high_risk_count INTEGER,
                risk_score NUMERIC
            ) AS $$
            BEGIN
                RETURN QUERY
                SELECT 
                    COUNT(*)::INTEGER as event_count,
                    COUNT(CASE WHEN severity IN ('high', 'critical') THEN 1 END)::INTEGER as high_risk_count,
                    CASE 
                        WHEN COUNT(*) > 0 THEN 
                            (COUNT(CASE WHEN severity IN ('high', 'critical') THEN 1 END)::NUMERIC / COUNT(*)::NUMERIC * 100)
                        ELSE 0 
                    END as risk_score
                FROM risk_events
                WHERE ST_DWithin(
                    location::geography,
                    ST_SetSRID(ST_MakePoint(lon, lat), 4326)::geography,
                    radius_km * 1000
                );
            END;
            $$ LANGUAGE plpgsql;
        """)
        print("‚úÖ Funkce calculate_risk_in_radius vytvo≈ôena")
        
        # 5. Vlo≈æen√≠ demo dat
        print("üìù Vkl√°d√°m demo data...")
        
        # Demo risk events
        demo_events = [
            ("Z√°plavy v ji≈æn√≠ch ƒåech√°ch", "Siln√© de≈°tƒõ zp≈Øsobily z√°plavy v ji≈æn√≠ch ƒåech√°ch", 49.0, 14.5, "flood", "high", "chmi_api"),
            ("Protesty v Praze", "Demonstrace proti vl√°dn√≠m opat≈ôen√≠m", 50.0755, 14.4378, "protest", "medium", "rss"),
            ("Dopravn√≠ nehoda na D1", "Hav√°rie kamionu blokuje d√°lnici D1", 49.8, 14.5, "supply_chain", "high", "manual"),
            ("Politick√© napƒõt√≠ v regionu", "Eskalace politick√©ho napƒõt√≠", 50.1, 14.4, "geopolitical", "medium", "rss"),
            ("Povodnƒõ na Vltavƒõ", "Vzestup hladiny Vltavy ohro≈æuje okoln√≠ oblasti", 49.2, 14.4, "flood", "critical", "chmi_api"),
            ("St√°vka dopravc≈Ø", "St√°vka dopravn√≠ch spoleƒçnost√≠", 50.0, 14.3, "supply_chain", "high", "rss"),
            ("Extr√©mn√≠ poƒças√≠", "Siln√© bou≈ôky a krupobit√≠", 49.5, 14.6, "flood", "medium", "chmi_api"),
            ("Probl√©my s dod√°vkami", "Opo≈ædƒõn√≠ dod√°vek komponent≈Ø", 50.2, 14.5, "supply_chain", "medium", "manual"),
            ("Soci√°ln√≠ nepokoje", "Demonstrace a nepokoje", 49.9, 14.4, "protest", "high", "rss")
        ]
        
        for event in demo_events:
            cur.execute("""
                INSERT INTO risk_events (title, description, location, event_type, severity, source)
                VALUES (%s, %s, point(%s, %s), %s, %s, %s)
                ON CONFLICT DO NOTHING
            """, event)
        
        print(f"‚úÖ Vlo≈æeno {len(demo_events)} demo risk events")
        
        # Demo dodavatel√©
        demo_suppliers = [
            ("Bosch Electronics", 49.8, 14.4, "electronics", "medium"),
            ("Continental Tires", 50.1, 14.5, "tires", "low"),
            ("ZF Steering Systems", 49.9, 14.3, "steering", "high"),
            ("Brembo Brakes", 50.2, 14.6, "brakes", "medium"),
            ("Valeo Lighting", 49.7, 14.5, "electronics", "low"),
            ("Michelin Tires", 50.0, 14.4, "tires", "medium"),
            ("TRW Safety Systems", 49.6, 14.3, "safety", "high"),
            ("Delphi Electronics", 50.3, 14.5, "electronics", "medium"),
            ("Goodyear Tires", 49.5, 14.6, "tires", "low")
        ]
        
        for supplier in demo_suppliers:
            cur.execute("""
                INSERT INTO vw_suppliers (name, location, category, risk_level)
                VALUES (%s, point(%s, %s), %s, %s)
                ON CONFLICT DO NOTHING
            """, supplier)
        
        print(f"‚úÖ Vlo≈æeno {len(demo_suppliers)} demo dodavatel≈Ø")
        
        conn.commit()
        print("‚úÖ V≈°echny zmƒõny commitnuty!")
        
        # 6. Kontrola v√Ωsledku
        cur.execute("SELECT COUNT(*) FROM risk_events")
        events_count = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM vw_suppliers")
        suppliers_count = cur.fetchone()[0]
        
        print(f"üìä Fin√°ln√≠ stav:")
        print(f"   - Risk events: {events_count}")
        print(f"   - Suppliers: {suppliers_count}")
        
        conn.close()
        print("üéâ Inicializace risk analyst datab√°ze dokonƒçena √∫spƒõ≈°nƒõ!")
        return True
        
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi inicializaci: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("=" * 50)
    print("RISK ANALYST DATABASE INITIALIZATION")
    print("=" * 50)
    
    success = init_risk_db()
    
    if success:
        print("‚úÖ Inicializace √∫spƒõ≈°n√°!")
        sys.exit(0)
    else:
        print("‚ùå Inicializace selhala!")
        sys.exit(1) 